{
    "kind": "Listing",
    "data": {
        "after": "t3_1n0sbdm",
        "dist": 27,
        "modhash": null,
        "geo_filter": null,
        "children": [
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f",
                    "author_fullname": "t2_6l4z3",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Sunday Daily Thread: What's everyone working on this week?",
                    "link_flair_richtext": [
                        {
                            "a": ":pythonLogo:",
                            "e": "emoji",
                            "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                        },
                        {
                            "e": "text",
                            "t": " Daily Thread"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "daily-thread",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1myh2vu",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.56,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 1,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": ":pythonLogo: Daily Thread",
                    "can_mod_post": false,
                    "score": 1,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": true,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1755993632.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: What&amp;#39;s Everyone Working On This Week? \ud83d\udee0\ufe0f&lt;/h1&gt;\n\n&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! It&amp;#39;s time to share what you&amp;#39;ve been working on! Whether it&amp;#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&amp;#39;re up to!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Show &amp;amp; Tell&lt;/strong&gt;: Share your current projects, completed works, or future ideas.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Discuss&lt;/strong&gt;: Get feedback, find collaborators, or just chat about your project.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inspire&lt;/strong&gt;: Your project might inspire someone else, just as you might get inspired here.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Feel free to include as many details as you&amp;#39;d like. Code snippets, screenshots, and links are all welcome.&lt;/li&gt;\n&lt;li&gt;Whether it&amp;#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Machine Learning Model&lt;/strong&gt;: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Web Scraping&lt;/strong&gt;: Built a script to scrape and analyze news articles. It&amp;#39;s helped me understand media bias better.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": "moderator",
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#00a6a5",
                    "id": "1myh2vu",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "AutoModerator",
                    "discussion_type": null,
                    "num_comments": 6,
                    "send_replies": false,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1myh2vu/sunday_daily_thread_whats_everyone_working_on/",
                    "stickied": true,
                    "url": "https://www.reddit.com/r/Python/comments/1myh2vu/sunday_daily_thread_whats_everyone_working_on/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1755993632.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! \ud83c\udf1f",
                    "author_fullname": "t2_6l4z3",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Tuesday Daily Thread: Advanced questions",
                    "link_flair_richtext": [
                        {
                            "a": ":pythonLogo:",
                            "e": "emoji",
                            "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"
                        },
                        {
                            "e": "text",
                            "t": " Daily Thread"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "daily-thread",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n06wx9",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.72,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 3,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": ":pythonLogo: Daily Thread",
                    "can_mod_post": false,
                    "score": 3,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": true,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756166445.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d&lt;/h1&gt;\n\n&lt;p&gt;Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Away&lt;/strong&gt;: Post your advanced Python questions here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Expert Insights&lt;/strong&gt;: Get answers from experienced developers.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Pool&lt;/strong&gt;: Share or discover tutorials, articles, and tips.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is for &lt;strong&gt;advanced questions only&lt;/strong&gt;. Beginner questions are welcome in our &lt;a href=\"#daily-beginner-thread-link\"&gt;Daily Beginner Thread&lt;/a&gt; every Thursday.&lt;/li&gt;\n&lt;li&gt;Questions that are not advanced may be removed and redirected to the appropriate thread.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;How can you implement a custom memory allocator in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for optimizing Cython code for heavy numerical computations?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do you set up a multi-threaded architecture using Python&amp;#39;s Global Interpreter Lock (GIL)?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How would you go about implementing a distributed task queue using Celery and RabbitMQ?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are some advanced use-cases for Python&amp;#39;s decorators?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How can you achieve real-time data streaming in Python with WebSockets?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Best practices for securing a Flask (or similar) REST API with OAuth 2.0?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s deepen our Python knowledge together. Happy coding! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo.jpeg?auto=webp&amp;s=56dc937d2820c5093e2729259b20ca8414627043",
                                    "width": 512,
                                    "height": 288
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo.jpeg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f20393fb30cc1a6b6fda9340519c8a337627f514",
                                        "width": 108,
                                        "height": 60
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo.jpeg?width=216&amp;crop=smart&amp;auto=webp&amp;s=31bec2224ff1cf081bd03be5442c47b61b9acf61",
                                        "width": 216,
                                        "height": 121
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo.jpeg?width=320&amp;crop=smart&amp;auto=webp&amp;s=be0fdd679750ca730493f2068c95df1988ce547d",
                                        "width": 320,
                                        "height": 180
                                    }
                                ],
                                "variants": {},
                                "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": "moderator",
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#00a6a5",
                    "id": "1n06wx9",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "AutoModerator",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": false,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n06wx9/tuesday_daily_thread_advanced_questions/",
                    "stickied": true,
                    "url": "https://www.reddit.com/r/Python/comments/1n06wx9/tuesday_daily_thread_advanced_questions/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756166445.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I'm always amazed at the hidden gems in python that can make code cleaner or more efficient. Weather its clever use of comprehensions to underrated standard library modules - whats a Python trick you\u2019ve discovered that really saved you some time or made your projects easier",
                    "author_fullname": "t2_1v29q4gjyw",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Whats your favorite Python trick or lesser known feature?",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0ng7f",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.96,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 276,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 276,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756218712.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m always amazed at the hidden gems in python that can make code cleaner or more efficient. Weather its clever use of comprehensions to underrated standard library modules - whats a Python trick you\u2019ve discovered that really saved you some time or made your projects easier&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n0ng7f",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "figroot0",
                    "discussion_type": null,
                    "num_comments": 183,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0ng7f/whats_your_favorite_python_trick_or_lesser_known/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0ng7f/whats_your_favorite_python_trick_or_lesser_known/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756218712.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I swear to the non-existent God I'm not trying to start a flame war but literally who needs Jython? It doesn't even support anything past v2. \n\nI wouldn't bother but when I see projects like this I always wonder if I'm missing something.\n\nNot that I have some ridiculous amount of Java experience either, frankly.",
                    "author_fullname": "t2_115vrlrmmj",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Why is Jython? Who is it for?",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n12znd",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.56,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 12,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 12,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756255354.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I swear to the non-existent God I&amp;#39;m not trying to start a flame war but literally who needs Jython? It doesn&amp;#39;t even support anything past v2. &lt;/p&gt;\n\n&lt;p&gt;I wouldn&amp;#39;t bother but when I see projects like this I always wonder if I&amp;#39;m missing something.&lt;/p&gt;\n\n&lt;p&gt;Not that I have some ridiculous amount of Java experience either, frankly.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n12znd",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "fabriqus",
                    "discussion_type": null,
                    "num_comments": 43,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n12znd/why_is_jython_who_is_it_for/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n12znd/why_is_jython_who_is_it_for/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756255354.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "**What My Project Does:**\n\nSagebox is a comprehensive GUI providing GUI-based controls and graphics, that can be used in a simple procedural manner. \n\n**Target Audience:**\n\nAnyone, really.   Hobbyists, research, professional.  I have used in the industry quite a lot, but also use it for quick prototyping and just playing around with graphics.  The github page has examples of many different ypes.\n\n\n\n**Comparison**:\n\nSagebox is meant to provide easily-used and access controls that are also scalable into more complex controls as-you-go, which is the main emphasis -- easily-used but scalable as a procedural GUI with a lot of control, widgets, and graphics functions.    \n  \nOne of the main differences, besides being procedural (which some GUIs are, too) is having controls and graphics as specialized areas that can work independently or together, to create personalized control-based windows, as well quick developer-based controls that are easily created and automatically placed. \n\n  \nIt's also purposely designed to work with all other GUIs and libraries, so you can use it, for example, to provide controls while using Matlplot lib (see examples on the github page), and it can work along side PySimple Gui or Pygame, since every GUI has it's strengths that people like. \n\n  \n**Here is the main text:** \n\n  [http://github.com/Sagebox/Pybox](http://github.com/Sagebox/Pybox) (Overview, pip install, screenshots, getting-started example code, and working example projects).\n\n# Sagebox Procedural GUI Toolset Initial Beta\nI'm pleased to announce the initial public beta release of Sagebox, a comprehensive, procedurally-based GUI library for Python. This project started a few years ago as a professional tool for my own work, and after being used and proven in industry, I'm excited to finally share it with the developer community as a free GUI toolset. \n&gt; **A quick note on this release**:\nAs a first release, your feedback and discussion would be great regarding your experiences, any kinks in the process, bugs, etc.  For more details on the current status and roadmap, please see the [About This Beta Release](#about-this-beta-release) section at the end of this post.\n\n# A Comprehensive, Procedural GUI \nSagebox is a set of GUI tools designed for creative development and rapid prototyping, allowing you to build powerful, graphics-based programs without forms or boilerplate code.\n\nIt was designed from scratch for creating everything from full desktop applications and console-mode programs with controls, to just having fun with graphics.\nSagebox has been used for a few years in industry at places like Pioneer, Pentair and ASML, where it was called ***\"that magic program.\"*** \n\n## **Some of the key design principles behind Sagebox**\n\n#### No Boilerplate\n\n- Sagebox starts itself up when you use any function, so there is no need to initialize it or set up an environment. You can call up a slider in a console program, for example, with just a few lines of code.\n\n#### Acts as a simple Library\n- Built as a self-contained GUI kernel, Sagebox functions as a set of library calls. You can add or remove calls as you want and use all standard types (e.g. numpy arrays, lists, tuples) of choice, without changing your code to suit Sagebox.\n\n#### Scalability\n- Sagebox is designed for any level of complexity, from simple console tools to full desktop applications. Controls can be created and used with as little as two lines of code, and the library scales to more powerful graphics and controls as needed (see examples).\n- *Self-contained platform- and language-agnostic GUI kernel.* The Sagebox GUI kernel is completely self-contained, allowing it to manage the entire OS GUI environment so your program does not have to, generally creating controls and graphics in fire-and-forget fashion. This also allows the GUI kernel to work on any platform (e.g. Windows, Linux, macOS, Android) as well as remain language-agnostic to work on any language on its own idiomatic terms.\n\n#### Compatible with Other Libraries\n- Sagebox is designed to be compatible with other GUI and general libraries like PySimpleGUI, PyGame, *Matplotlib*, etc. . For example, the Python GitHub page has examples of using Sagebox GUI controls with *Matplotlib*.\n\n## GitHub Pages, Installation, Examples and Screenshots\nFor simple (and full program) code examples, installation instructions, and roadmap details, click on the GitHub page: \n\n- Python - [http://github.com/Sagebox/Pybox](http://github.com/Sagebox/Pybox) (called Pybox for Python version. C++ and Rust are also supported.)\n\n## Video Examples (YouTube)\n\nYou can also view some examples on the YouTube page: \n- [https://www.youtube.com/@projectsagebox](https://www.youtube.com/@projectsagebox) \n**note**: the current videos are Rust examples, but they \nwork and look exactly the same in all languages.\n Other C++ and Python videos are currently offline and will be put back online shortly.\n\n# About This Beta Release\n\nThis is the first release of Sagebox, which has been used in private industry for a few years. It works with Windows, with Linux support coming in just a few months. \n \nAll screenshots and video examples were created with the current version of Sagebox.  It is used already as a robust and comprehensive working beta, and a lot of work has been put in to make it useful for everyone, from hobbyists, professionals, research &amp; education, to just having fun with programming. \n\nI'm excited about what can be added to it in future versions and the current roadmap: \n\n- **Break-In Period (2-3 weeks).**  This initial beta period is just 2-3 weeks long to get first impressions, any bugs, kinks, to generally make sure it works for everyone.\n- **Next Beta Release (4-6 weeks)**. The next release is scheduled for 4-6 weeks from now with:\n  - **Added functionality.**  There is a lot of functionality in Sagebox that has not yet been added to the interface.  This is being completed now, and expect even more interesting things. \n  - **Documentation.**  More documentation will be added.  Right now, the functions have full documentation for the editor, and documentation is always something there can be more of.\n- **Windows and Linux.**  The Windows version was released before the linux version on purpose, to help get feedback and usage experiences as the Linux version is being completed.  This was done purposely to get community feedback to help with preferred community directions in the Linux version, particularly with look-and-feel and what things people would prefer prioritized over others (e.g. GPU functions vs. added widgets and other features) -- as well as interoperability with other preferred libraries. \n- **Future Development.** Sagebox is a free GUI toolset. As Sagebox continues to evolve, your feedback and suggestions are appreciated. To follow the project's roadmap and learn more about its future as a community-focused library, please see the GitHub Page.\n\nI look forward to answering any questions you have, feedback and suggestions. \n\n",
                    "author_fullname": "t2_5tywnfbf",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "I Just released Sagebox - a procedural GUI library for Python (Initial Beta)",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0wemp",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.89,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 19,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 19,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756238936.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Sagebox is a comprehensive GUI providing GUI-based controls and graphics, that can be used in a simple procedural manner. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Anyone, really.   Hobbyists, research, professional.  I have used in the industry quite a lot, but also use it for quick prototyping and just playing around with graphics.  The github page has examples of many different ypes.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;Sagebox is meant to provide easily-used and access controls that are also scalable into more complex controls as-you-go, which is the main emphasis -- easily-used but scalable as a procedural GUI with a lot of control, widgets, and graphics functions.    &lt;/p&gt;\n\n&lt;p&gt;One of the main differences, besides being procedural (which some GUIs are, too) is having controls and graphics as specialized areas that can work independently or together, to create personalized control-based windows, as well quick developer-based controls that are easily created and automatically placed. &lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s also purposely designed to work with all other GUIs and libraries, so you can use it, for example, to provide controls while using Matlplot lib (see examples on the github page), and it can work along side PySimple Gui or Pygame, since every GUI has it&amp;#39;s strengths that people like. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Here is the main text:&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://github.com/Sagebox/Pybox\"&gt;http://github.com/Sagebox/Pybox&lt;/a&gt; (Overview, pip install, screenshots, getting-started example code, and working example projects).&lt;/p&gt;\n\n&lt;h1&gt;Sagebox Procedural GUI Toolset Initial Beta&lt;/h1&gt;\n\n&lt;p&gt;I&amp;#39;m pleased to announce the initial public beta release of Sagebox, a comprehensive, procedurally-based GUI library for Python. This project started a few years ago as a professional tool for my own work, and after being used and proven in industry, I&amp;#39;m excited to finally share it with the developer community as a free GUI toolset. &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;A quick note on this release&lt;/strong&gt;:\nAs a first release, your feedback and discussion would be great regarding your experiences, any kinks in the process, bugs, etc.  For more details on the current status and roadmap, please see the &lt;a href=\"#about-this-beta-release\"&gt;About This Beta Release&lt;/a&gt; section at the end of this post.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h1&gt;A Comprehensive, Procedural GUI&lt;/h1&gt;\n\n&lt;p&gt;Sagebox is a set of GUI tools designed for creative development and rapid prototyping, allowing you to build powerful, graphics-based programs without forms or boilerplate code.&lt;/p&gt;\n\n&lt;p&gt;It was designed from scratch for creating everything from full desktop applications and console-mode programs with controls, to just having fun with graphics.\nSagebox has been used for a few years in industry at places like Pioneer, Pentair and ASML, where it was called &lt;strong&gt;&lt;em&gt;&amp;quot;that magic program.&amp;quot;&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;\n\n&lt;h2&gt;&lt;strong&gt;Some of the key design principles behind Sagebox&lt;/strong&gt;&lt;/h2&gt;\n\n&lt;h4&gt;No Boilerplate&lt;/h4&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Sagebox starts itself up when you use any function, so there is no need to initialize it or set up an environment. You can call up a slider in a console program, for example, with just a few lines of code.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h4&gt;Acts as a simple Library&lt;/h4&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Built as a self-contained GUI kernel, Sagebox functions as a set of library calls. You can add or remove calls as you want and use all standard types (e.g. numpy arrays, lists, tuples) of choice, without changing your code to suit Sagebox.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h4&gt;Scalability&lt;/h4&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Sagebox is designed for any level of complexity, from simple console tools to full desktop applications. Controls can be created and used with as little as two lines of code, and the library scales to more powerful graphics and controls as needed (see examples).&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;Self-contained platform- and language-agnostic GUI kernel.&lt;/em&gt; The Sagebox GUI kernel is completely self-contained, allowing it to manage the entire OS GUI environment so your program does not have to, generally creating controls and graphics in fire-and-forget fashion. This also allows the GUI kernel to work on any platform (e.g. Windows, Linux, macOS, Android) as well as remain language-agnostic to work on any language on its own idiomatic terms.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h4&gt;Compatible with Other Libraries&lt;/h4&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Sagebox is designed to be compatible with other GUI and general libraries like PySimpleGUI, PyGame, &lt;em&gt;Matplotlib&lt;/em&gt;, etc. . For example, the Python GitHub page has examples of using Sagebox GUI controls with &lt;em&gt;Matplotlib&lt;/em&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;GitHub Pages, Installation, Examples and Screenshots&lt;/h2&gt;\n\n&lt;p&gt;For simple (and full program) code examples, installation instructions, and roadmap details, click on the GitHub page: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Python - &lt;a href=\"http://github.com/Sagebox/Pybox\"&gt;http://github.com/Sagebox/Pybox&lt;/a&gt; (called Pybox for Python version. C++ and Rust are also supported.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Video Examples (YouTube)&lt;/h2&gt;\n\n&lt;p&gt;You can also view some examples on the YouTube page: \n- &lt;a href=\"https://www.youtube.com/@projectsagebox\"&gt;https://www.youtube.com/@projectsagebox&lt;/a&gt; \n&lt;strong&gt;note&lt;/strong&gt;: the current videos are Rust examples, but they \nwork and look exactly the same in all languages.\n Other C++ and Python videos are currently offline and will be put back online shortly.&lt;/p&gt;\n\n&lt;h1&gt;About This Beta Release&lt;/h1&gt;\n\n&lt;p&gt;This is the first release of Sagebox, which has been used in private industry for a few years. It works with Windows, with Linux support coming in just a few months. &lt;/p&gt;\n\n&lt;p&gt;All screenshots and video examples were created with the current version of Sagebox.  It is used already as a robust and comprehensive working beta, and a lot of work has been put in to make it useful for everyone, from hobbyists, professionals, research &amp;amp; education, to just having fun with programming. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m excited about what can be added to it in future versions and the current roadmap: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Break-In Period (2-3 weeks).&lt;/strong&gt;  This initial beta period is just 2-3 weeks long to get first impressions, any bugs, kinks, to generally make sure it works for everyone.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Next Beta Release (4-6 weeks)&lt;/strong&gt;. The next release is scheduled for 4-6 weeks from now with:\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Added functionality.&lt;/strong&gt;  There is a lot of functionality in Sagebox that has not yet been added to the interface.  This is being completed now, and expect even more interesting things. &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Documentation.&lt;/strong&gt;  More documentation will be added.  Right now, the functions have full documentation for the editor, and documentation is always something there can be more of.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Windows and Linux.&lt;/strong&gt;  The Windows version was released before the linux version on purpose, to help get feedback and usage experiences as the Linux version is being completed.  This was done purposely to get community feedback to help with preferred community directions in the Linux version, particularly with look-and-feel and what things people would prefer prioritized over others (e.g. GPU functions vs. added widgets and other features) -- as well as interoperability with other preferred libraries. &lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Future Development.&lt;/strong&gt; Sagebox is a free GUI toolset. As Sagebox continues to evolve, your feedback and suggestions are appreciated. To follow the project&amp;#39;s roadmap and learn more about its future as a community-focused library, please see the GitHub Page.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I look forward to answering any questions you have, feedback and suggestions. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/9DqFiiuH21f0kAC74Rtc1DXhi7eAC_cgnQyZ_reAhIA.jpeg?auto=webp&amp;s=caa1f2f0184c01ffbfcb3b06802bae69dfd514c9",
                                    "width": 1280,
                                    "height": 640
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/9DqFiiuH21f0kAC74Rtc1DXhi7eAC_cgnQyZ_reAhIA.jpeg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d09834c56e0cda9d15f3b4365488a27e36c84e01",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/9DqFiiuH21f0kAC74Rtc1DXhi7eAC_cgnQyZ_reAhIA.jpeg?width=216&amp;crop=smart&amp;auto=webp&amp;s=55ff76657a028ebc5371db24d3eb902306e095b4",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/9DqFiiuH21f0kAC74Rtc1DXhi7eAC_cgnQyZ_reAhIA.jpeg?width=320&amp;crop=smart&amp;auto=webp&amp;s=1699d177cb1a63347b4c8e0da8ef0c5d389822e9",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/9DqFiiuH21f0kAC74Rtc1DXhi7eAC_cgnQyZ_reAhIA.jpeg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a4c00a2a6ed0fd5579a2d50b525c43773483f2f6",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/9DqFiiuH21f0kAC74Rtc1DXhi7eAC_cgnQyZ_reAhIA.jpeg?width=960&amp;crop=smart&amp;auto=webp&amp;s=acb1446d55a89ca6ca1b51406b8cbf31a795f412",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/9DqFiiuH21f0kAC74Rtc1DXhi7eAC_cgnQyZ_reAhIA.jpeg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=b8ccda345c70d7f2d2e05a013a832be53adc5ecc",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "9DqFiiuH21f0kAC74Rtc1DXhi7eAC_cgnQyZ_reAhIA"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n0wemp",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "TheRallyMaster",
                    "discussion_type": null,
                    "num_comments": 5,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0wemp/i_just_released_sagebox_a_procedural_gui_library/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0wemp/i_just_released_sagebox_a_procedural_gui_library/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756238936.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "**What My Project Does:**\n\n**ncaa\\_bbStats**\u00a0is an open-source Python package for retrieving, parsing, and analyzing Division I, II, and III college baseball team statistics (2002\u20132025), player statistics (2021-2025), and MLB Draft data (1965-2025).\n\n**Target Audience:**\n\nResearchers, analysts, or general fans looking to see how teams perform from 2002-2025 and players from 2021-2025. \n\n**Comparison**:\n\nIt was hard finding any resources for college baseball, but of the ones I did find I couldn't find direct statistical retrieve functions for research purposes. Especially that of players and team statistics. I hope this project is able to fulfill that.\n\n**Main Text:**\n\nHey everyone,\n\nI built a Python package called\u00a0**ncaa\\_bbStats**\u00a0that lets you pull and analyze NCAA Division I, II, and III baseball stats (2002\u20132025), player stats (2021\u20132025), and MLB Draft data (1965\u20132025).\n\nSome things you can do with it:\n\n* Get team stats like BA, ERA, OBP, SLG, FPCT\n* Compute Pythagorean expectation &amp; compare to actual records\n* Build player leaderboards (HR leaders, K/9 leaders, etc.)\n* Retrieve MLB Draft picks for any NCAA team since 1965\n\nDocs:\u00a0[https://collegebaseballstatspackage.readthedocs.io/](https://collegebaseballstatspackage.readthedocs.io/)  \nPyPI:\u00a0[https://pypi.org/project/ncaa-bbStats/](https://pypi.org/project/ncaa-bbStats/)  \nGitHub:\u00a0[https://github.com/CodeMateo15/CollegeBaseballStatsPackage](https://github.com/CodeMateo15/CollegeBaseballStatsPackage)\n\nIt\u2019s still under development, so I\u2019d love feedback, collaborators, or even just a GitHub \u2b50 if you think it\u2019s cool.\n\nIf you\u2019re into college baseball, MLB draft history, or sports analytics with Python, check it out and let me know what you think!\n\nNOTE: new profile cause I have public info on the github I don't want to link to my actual account lol\n\n",
                    "author_fullname": "t2_1wio5yteyg",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Python package for NCAA Baseball &amp; MLB Draft stats",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n16al4",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 1.0,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 3,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 3,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756264765.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;ncaa_bbStats&lt;/strong&gt;\u00a0is an open-source Python package for retrieving, parsing, and analyzing Division I, II, and III college baseball team statistics (2002\u20132025), player statistics (2021-2025), and MLB Draft data (1965-2025).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Researchers, analysts, or general fans looking to see how teams perform from 2002-2025 and players from 2021-2025. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;It was hard finding any resources for college baseball, but of the ones I did find I couldn&amp;#39;t find direct statistical retrieve functions for research purposes. Especially that of players and team statistics. I hope this project is able to fulfill that.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Main Text:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Hey everyone,&lt;/p&gt;\n\n&lt;p&gt;I built a Python package called\u00a0&lt;strong&gt;ncaa_bbStats&lt;/strong&gt;\u00a0that lets you pull and analyze NCAA Division I, II, and III baseball stats (2002\u20132025), player stats (2021\u20132025), and MLB Draft data (1965\u20132025).&lt;/p&gt;\n\n&lt;p&gt;Some things you can do with it:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Get team stats like BA, ERA, OBP, SLG, FPCT&lt;/li&gt;\n&lt;li&gt;Compute Pythagorean expectation &amp;amp; compare to actual records&lt;/li&gt;\n&lt;li&gt;Build player leaderboards (HR leaders, K/9 leaders, etc.)&lt;/li&gt;\n&lt;li&gt;Retrieve MLB Draft picks for any NCAA team since 1965&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Docs:\u00a0&lt;a href=\"https://collegebaseballstatspackage.readthedocs.io/\"&gt;https://collegebaseballstatspackage.readthedocs.io/&lt;/a&gt;&lt;br/&gt;\nPyPI:\u00a0&lt;a href=\"https://pypi.org/project/ncaa-bbStats/\"&gt;https://pypi.org/project/ncaa-bbStats/&lt;/a&gt;&lt;br/&gt;\nGitHub:\u00a0&lt;a href=\"https://github.com/CodeMateo15/CollegeBaseballStatsPackage\"&gt;https://github.com/CodeMateo15/CollegeBaseballStatsPackage&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It\u2019s still under development, so I\u2019d love feedback, collaborators, or even just a GitHub \u2b50 if you think it\u2019s cool.&lt;/p&gt;\n\n&lt;p&gt;If you\u2019re into college baseball, MLB draft history, or sports analytics with Python, check it out and let me know what you think!&lt;/p&gt;\n\n&lt;p&gt;NOTE: new profile cause I have public info on the github I don&amp;#39;t want to link to my actual account lol&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n16al4",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Relative_Spinach7950",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n16al4/python_package_for_ncaa_baseball_mlb_draft_stats/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n16al4/python_package_for_ncaa_baseball_mlb_draft_stats/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756264765.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hey everyone - I\u2019ve been thinking a lot about Python developer experience for data infrastructure, and why it matters almost as much performance. We\u2019re not just building data warehouses for BI dashboards and data science anymore. OLAP and real-time analytics are powering massively scaled software development efforts. But the DX is still pretty outdated relative to modern software dev\u2014things like schemas in YAML configs, manual SQL workflows, and brittle migrations.\n\nI\u2019d like to propose eight core principles to bring analytics developer tooling in line with modern software engineering: **git-native workflows, local-first environments, schemas as python code, modularity, open\u2011source tooling, AI/copilot\u2011friendliness, and transparent CI/CD + migrations.**\n\nWe\u2019ve started implementing these ideas in[ MooseStack](https://github.com/514-labs/moosestack) (open source, MIT licensed):\n\n* **Migrations** \u2192 before deploying, your code is diffed against the live schema and a migration plan is generated. If drift has crept in, it fails fast instead of corrupting data.\n* **Local development** \u2192 your entire data infra stack materialized locally with one command. Branch off main, and all production models are instantly available to dev against.\n* **Type safety** \u2192 rename a column in your code, and every SQL fragment, stream, pipeline, or API depending on it gets flagged immediately in your IDE.\n\nI\u2019d love to spark a genuine discussion here, especially with those of you who have worked with analytical systems like Snowflake, Databricks, BigQuery, ClickHouse, etc and tried building production workloads in Python:\n\n* Is developing in a local environment that mirrors production important for these workloads?\n* How do you currently move from dev \u2192 prod in OLAP or analytical systems? Do you use staging environments?\u00a0\n* Where do your workflows stall\u2014migrations, environment mismatches, config?\n* Which of the eight principles seem most lacking in your toolbox today?\n\nFor anyone interested, I helped write a blog post on this topic, and you can read it here: [*https://clickhouse.com/blog/eight-principles-of-great-developer-experience-for-data-infrastructure*](https://clickhouse.com/blog/eight-principles-of-great-developer-experience-for-data-infrastructure)",
                    "author_fullname": "t2_kzc88",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Python DX for data &amp; analytics infrastructure",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0yv7u",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 1.0,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 7,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 7,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756244643.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone - I\u2019ve been thinking a lot about Python developer experience for data infrastructure, and why it matters almost as much performance. We\u2019re not just building data warehouses for BI dashboards and data science anymore. OLAP and real-time analytics are powering massively scaled software development efforts. But the DX is still pretty outdated relative to modern software dev\u2014things like schemas in YAML configs, manual SQL workflows, and brittle migrations.&lt;/p&gt;\n\n&lt;p&gt;I\u2019d like to propose eight core principles to bring analytics developer tooling in line with modern software engineering: &lt;strong&gt;git-native workflows, local-first environments, schemas as python code, modularity, open\u2011source tooling, AI/copilot\u2011friendliness, and transparent CI/CD + migrations.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;We\u2019ve started implementing these ideas in&lt;a href=\"https://github.com/514-labs/moosestack\"&gt; MooseStack&lt;/a&gt; (open source, MIT licensed):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Migrations&lt;/strong&gt; \u2192 before deploying, your code is diffed against the live schema and a migration plan is generated. If drift has crept in, it fails fast instead of corrupting data.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Local development&lt;/strong&gt; \u2192 your entire data infra stack materialized locally with one command. Branch off main, and all production models are instantly available to dev against.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Type safety&lt;/strong&gt; \u2192 rename a column in your code, and every SQL fragment, stream, pipeline, or API depending on it gets flagged immediately in your IDE.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I\u2019d love to spark a genuine discussion here, especially with those of you who have worked with analytical systems like Snowflake, Databricks, BigQuery, ClickHouse, etc and tried building production workloads in Python:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is developing in a local environment that mirrors production important for these workloads?&lt;/li&gt;\n&lt;li&gt;How do you currently move from dev \u2192 prod in OLAP or analytical systems? Do you use staging environments?\u00a0&lt;/li&gt;\n&lt;li&gt;Where do your workflows stall\u2014migrations, environment mismatches, config?&lt;/li&gt;\n&lt;li&gt;Which of the eight principles seem most lacking in your toolbox today?&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For anyone interested, I helped write a blog post on this topic, and you can read it here: &lt;a href=\"https://clickhouse.com/blog/eight-principles-of-great-developer-experience-for-data-infrastructure\"&gt;&lt;em&gt;https://clickhouse.com/blog/eight-principles-of-great-developer-experience-for-data-infrastructure&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/uHdP_k9j4p7NCAIBD-XGpWvoAHWGvw-MEOVbyhq1EJ4.png?auto=webp&amp;s=c3f4f8ec95f0150f0411c56f807bbe00bdf02b16",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/uHdP_k9j4p7NCAIBD-XGpWvoAHWGvw-MEOVbyhq1EJ4.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=9e97ef4309db1e39a7bb2c91f0e61e335b2030c3",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/uHdP_k9j4p7NCAIBD-XGpWvoAHWGvw-MEOVbyhq1EJ4.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=ad75db6713c85cc2028c9751dc064f179cafdbf0",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/uHdP_k9j4p7NCAIBD-XGpWvoAHWGvw-MEOVbyhq1EJ4.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=70ef25694370d919852fd16a1e61a9c568447231",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/uHdP_k9j4p7NCAIBD-XGpWvoAHWGvw-MEOVbyhq1EJ4.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=e4c8beff1388dbd358e2046621273a4fc3a8728e",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/uHdP_k9j4p7NCAIBD-XGpWvoAHWGvw-MEOVbyhq1EJ4.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=b244718243b33ff14dc77ca720991144ab704f1e",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/uHdP_k9j4p7NCAIBD-XGpWvoAHWGvw-MEOVbyhq1EJ4.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f23480c71215ff613564769a55ede9383ba86d9d",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "uHdP_k9j4p7NCAIBD-XGpWvoAHWGvw-MEOVbyhq1EJ4"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n0yv7u",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "03cranec",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0yv7u/python_dx_for_data_analytics_infrastructure/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0yv7u/python_dx_for_data_analytics_infrastructure/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756244643.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "So I have this python script that generates a maze and has it scroll, and it also has some 'runners' on it. I managed to set it up as a screensaver, but I was wondering if it was possible to set it as a desktop wallpaper without turning it into a gif since each maze is generated at random.\n\nUpdate this is what I managed to do with you guys sugestions. I had claude clean it up so hopefully its understandable. So it sort of works, but it overlays the app icons even though they are still accessible and if you press the show desktop button at the bottom it removes it until you open an app. So basically it doesn't work.\n\n[https://github.com/footiper/Maze\\_Wallpaper.git](https://github.com/footiper/Maze_Wallpaper.git)\n\nIf anyone is interested I have the same thing as a screensaver that works great, just dm me or write it here idc, obv it's free.\n\n",
                    "author_fullname": "t2_mdx8rswul",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Python as a desktop background",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0ln2g",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.78,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 21,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 21,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": 1756241134.0,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756214336.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I have this python script that generates a maze and has it scroll, and it also has some &amp;#39;runners&amp;#39; on it. I managed to set it up as a screensaver, but I was wondering if it was possible to set it as a desktop wallpaper without turning it into a gif since each maze is generated at random.&lt;/p&gt;\n\n&lt;p&gt;Update this is what I managed to do with you guys sugestions. I had claude clean it up so hopefully its understandable. So it sort of works, but it overlays the app icons even though they are still accessible and if you press the show desktop button at the bottom it removes it until you open an app. So basically it doesn&amp;#39;t work.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/footiper/Maze_Wallpaper.git\"&gt;https://github.com/footiper/Maze_Wallpaper.git&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If anyone is interested I have the same thing as a screensaver that works great, just dm me or write it here idc, obv it&amp;#39;s free.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n0ln2g",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "According-Home485",
                    "discussion_type": null,
                    "num_comments": 20,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0ln2g/python_as_a_desktop_background/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0ln2g/python_as_a_desktop_background/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756214336.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hey all,\n\n## What my project does\n\nCreated a framework which allows you to create new linters/checkers/rules for `Python`, `YAML`, `JSON` or `TOML` (loose plans to extend the list if there's interest).\n\n__Repository__: https://github.com/open-nudge/lintkit\n\n## Key features\n\n- Multiple formats supported (as mentioned)\n- Supports well-known `noqa`/ignore comments (not only inline, but also per-file or even range-wise)\n- Python-wise small (less than `1000` LOC, see `/src`), provides [tutorials](https://open-nudge.github.io/lintkit/latest/tutorials/) and [API reference](https://open-nudge.github.io/lintkit/latest/reference/lintkit/) to make your life easier\n- Flexible - work directly with Python's [`ast`](https://docs.python.org/3/library/ast.html#ast.AST), make rules even across multiple files, settings to adjust the linter to your preference\n\n## Example linter\n\nBelow is a linter which verifies no `function` or `class` names contain word `util` (or variations of it):\n\n```python\nimport lintkit\n\n# Set the name of the linter\nlintkit.settings.name = \"NOUTILS\"\n\nclass _NoUtils(lintkit.check.Regex, lintkit.loader.Python, lintkit.rule.Node):\n    def regex(self):\n        # Regex to match util(s) variations in function/class name\n        return r\"_?[Uu]til(s|ities)?\"\n\n    def values(self):\n        # Yield class or function names from a Python file\n        data = self.getitem(\"nodes_map\")\n        for node in data[self.ast_class()]:\n            yield lintkit.Value.from_python(node.name, node)\n\n    def message(self, _):\n        return f\"{self.ast_class()} name contains util(s) word\"\n\n# Concrete rules and their codes\n# Disabling linter using noqas supported out of the box!\nclass ClassNoUtils(_NoUtils, code=0):  # noqa: NOUTILS0\n    # ast type we want to focus on in this rule\n    def ast_class(self):\n        return ast.ClassDef\n\nclass FunctionNoUtils(_NoUtils, code=1):  # noqa: NOUTILS0\n    def ast_class(self):\n        return ast.FunctionDef\n\nlintkit.run(\"linter.py\", \"file1.py\", \"file2.py\")\n\n# Example output\n#/path/file1.py:23:17 NOUTILS0: ClassDef name contains util(s) word\n#/path/file2.py:73:21 NOUTILS1: FunctionDef name contains util(s) word\n```\n\n## Target audience\n\nPeople who would like to create their own linter/automated checks for their code. Mostly Python, but not only (could be used to lint GitHub Actions or `k8s` manifests).\n\n## Comparison\n\n- [`ruff`](https://github.com/astral-sh/ruff) - provides rules out of the box, way faster and production ready, but AFAICT has no interface to add easily your own custom rules via Python, less flexible\n- [`flake8`](https://flake8.pycqa.org/en/latest/plugin-development/) - provides plugins, but with less flexibility and that's not the main goal of the project AFAIK\n\n## Other info\n\n- Python template which created all of the boilerplate during initialization (except code in `/src`, `/tests` and docs): https://github.com/open-nudge/opentemplate\n- GitHub repo: https://github.com/open-nudge/lintkit\n\nWelcoming feedback/requests either here or on GitHub, you can also follow on [__LinkedIn__](https://www.linkedin.com/company/opennudge),\n[__Twitter/X__](https://x.com/opennudge) or [GitHub organization](https://github.com/open-nudge) to have direct info about new tooling, thanks!\n\n\n",
                    "author_fullname": "t2_1bq357tt",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "lintkit - framework to create linters/checks for Python code, JSON, YAML or TOML",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0qtav",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.81,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 9,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 9,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756226341.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey all,&lt;/p&gt;\n\n&lt;h2&gt;What my project does&lt;/h2&gt;\n\n&lt;p&gt;Created a framework which allows you to create new linters/checkers/rules for &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;YAML&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt; or &lt;code&gt;TOML&lt;/code&gt; (loose plans to extend the list if there&amp;#39;s interest).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;: &lt;a href=\"https://github.com/open-nudge/lintkit\"&gt;https://github.com/open-nudge/lintkit&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Key features&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Multiple formats supported (as mentioned)&lt;/li&gt;\n&lt;li&gt;Supports well-known &lt;code&gt;noqa&lt;/code&gt;/ignore comments (not only inline, but also per-file or even range-wise)&lt;/li&gt;\n&lt;li&gt;Python-wise small (less than &lt;code&gt;1000&lt;/code&gt; LOC, see &lt;code&gt;/src&lt;/code&gt;), provides &lt;a href=\"https://open-nudge.github.io/lintkit/latest/tutorials/\"&gt;tutorials&lt;/a&gt; and &lt;a href=\"https://open-nudge.github.io/lintkit/latest/reference/lintkit/\"&gt;API reference&lt;/a&gt; to make your life easier&lt;/li&gt;\n&lt;li&gt;Flexible - work directly with Python&amp;#39;s &lt;a href=\"https://docs.python.org/3/library/ast.html#ast.AST\"&gt;&lt;code&gt;ast&lt;/code&gt;&lt;/a&gt;, make rules even across multiple files, settings to adjust the linter to your preference&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example linter&lt;/h2&gt;\n\n&lt;p&gt;Below is a linter which verifies no &lt;code&gt;function&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; names contain word &lt;code&gt;util&lt;/code&gt; (or variations of it):&lt;/p&gt;\n\n&lt;p&gt;```python\nimport lintkit&lt;/p&gt;\n\n&lt;h1&gt;Set the name of the linter&lt;/h1&gt;\n\n&lt;p&gt;lintkit.settings.name = &amp;quot;NOUTILS&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;class &lt;em&gt;NoUtils(lintkit.check.Regex, lintkit.loader.Python, lintkit.rule.Node):\n    def regex(self):\n        # Regex to match util(s) variations in function/class name\n        return r&amp;quot;&lt;/em&gt;?[Uu]til(s|ities)?&amp;quot;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def values(self):\n    # Yield class or function names from a Python file\n    data = self.getitem(&amp;quot;nodes_map&amp;quot;)\n    for node in data[self.ast_class()]:\n        yield lintkit.Value.from_python(node.name, node)\n\ndef message(self, _):\n    return f&amp;quot;{self.ast_class()} name contains util(s) word&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Concrete rules and their codes&lt;/h1&gt;\n\n&lt;h1&gt;Disabling linter using noqas supported out of the box!&lt;/h1&gt;\n\n&lt;p&gt;class ClassNoUtils(_NoUtils, code=0):  # noqa: NOUTILS0\n    # ast type we want to focus on in this rule\n    def ast_class(self):\n        return ast.ClassDef&lt;/p&gt;\n\n&lt;p&gt;class FunctionNoUtils(_NoUtils, code=1):  # noqa: NOUTILS0\n    def ast_class(self):\n        return ast.FunctionDef&lt;/p&gt;\n\n&lt;p&gt;lintkit.run(&amp;quot;linter.py&amp;quot;, &amp;quot;file1.py&amp;quot;, &amp;quot;file2.py&amp;quot;)&lt;/p&gt;\n\n&lt;h1&gt;Example output&lt;/h1&gt;\n\n&lt;h1&gt;/path/file1.py:23:17 NOUTILS0: ClassDef name contains util(s) word&lt;/h1&gt;\n\n&lt;h1&gt;/path/file2.py:73:21 NOUTILS1: FunctionDef name contains util(s) word&lt;/h1&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;h2&gt;Target audience&lt;/h2&gt;\n\n&lt;p&gt;People who would like to create their own linter/automated checks for their code. Mostly Python, but not only (could be used to lint GitHub Actions or &lt;code&gt;k8s&lt;/code&gt; manifests).&lt;/p&gt;\n\n&lt;h2&gt;Comparison&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/astral-sh/ruff\"&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/a&gt; - provides rules out of the box, way faster and production ready, but AFAICT has no interface to add easily your own custom rules via Python, less flexible&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://flake8.pycqa.org/en/latest/plugin-development/\"&gt;&lt;code&gt;flake8&lt;/code&gt;&lt;/a&gt; - provides plugins, but with less flexibility and that&amp;#39;s not the main goal of the project AFAIK&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Other info&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Python template which created all of the boilerplate during initialization (except code in &lt;code&gt;/src&lt;/code&gt;, &lt;code&gt;/tests&lt;/code&gt; and docs): &lt;a href=\"https://github.com/open-nudge/opentemplate\"&gt;https://github.com/open-nudge/opentemplate&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;GitHub repo: &lt;a href=\"https://github.com/open-nudge/lintkit\"&gt;https://github.com/open-nudge/lintkit&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Welcoming feedback/requests either here or on GitHub, you can also follow on &lt;a href=\"https://www.linkedin.com/company/opennudge\"&gt;&lt;strong&gt;LinkedIn&lt;/strong&gt;&lt;/a&gt;,\n&lt;a href=\"https://x.com/opennudge\"&gt;&lt;strong&gt;Twitter/X&lt;/strong&gt;&lt;/a&gt; or &lt;a href=\"https://github.com/open-nudge\"&gt;GitHub organization&lt;/a&gt; to have direct info about new tooling, thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/GrTVi8LzvP2lZQSfRZYQsnqlIICLS3iaD5y2MFrW-kA.png?auto=webp&amp;s=a017df29c9bcceca75b86ee00982bfca9fe1fcc2",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/GrTVi8LzvP2lZQSfRZYQsnqlIICLS3iaD5y2MFrW-kA.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=8ac8da766b4cac7d34421d8d21e316eb5f6fd714",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GrTVi8LzvP2lZQSfRZYQsnqlIICLS3iaD5y2MFrW-kA.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=a6fa2f2c8e6ecfb81d2ffc84353ba1a5281c461d",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GrTVi8LzvP2lZQSfRZYQsnqlIICLS3iaD5y2MFrW-kA.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=5ea72de35a3f17d4ae4892fcf2da84d0119f6ee9",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GrTVi8LzvP2lZQSfRZYQsnqlIICLS3iaD5y2MFrW-kA.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=ee7496816386e617c4ecf39dce026f7c7982f980",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GrTVi8LzvP2lZQSfRZYQsnqlIICLS3iaD5y2MFrW-kA.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=1d7e9c51c718b2bfcc4c85ccca1c1743404b728e",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GrTVi8LzvP2lZQSfRZYQsnqlIICLS3iaD5y2MFrW-kA.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=685c721a9f2800d89c72235d40316884181c8ae9",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "GrTVi8LzvP2lZQSfRZYQsnqlIICLS3iaD5y2MFrW-kA"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n0qtav",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "szymonmaszke",
                    "discussion_type": null,
                    "num_comments": 3,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0qtav/lintkit_framework_to_create_linterschecks_for/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0qtav/lintkit_framework_to_create_linterschecks_for/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756226341.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I came into Polars out of curiosity for the performance\u2026 and stayed for the rest! \n\nAfter a couple of weeks using polars everyday, I can say I absolutely love it (chefs kissed for how amazing are Polar\u2019s docs\u2026 stop using LLMs/Stackoverflow altogether for questions regarding Polars). It has completely replaced pandas for me - smoke it out of the water.\n\nBut I\u2019m at the point that\u2019d like to start getting a more intuitive way of thinking about Expressions and Series. I get that Series are a data structure (their take on  arrays) whilst Expressions are ***representation of a data transformation*** to use in te context of a df method (I can conceptually grasp the difference between a data structure and a transformation)\u2026 But practically speaking, when for instance I\u2019d like to work with strings (say to replace or match a regex), I found myself with two very similar pages in their docs: pl.Expr.replace() and pl.Series.str.replace() (actually, polars.Expr.str.replace and polars.Series.str.replace are identical).\n\nAnd I get that these are for two different uses based on the scope (I guess applying df-wide transformations vs a series-wide transformation?); but coming from Pandas I found myself choosing really nilly willy when to use or read the page of one versus the other\u2026 And would like to make a more conscious use/choice of when using one or the other. \n\nAnybody else finding themselves in that situation? Or is just me? I would truly appreciate if someone could suggest a way to start thinking about Series vs Expression to get a sort of heuristic of how to tell them apart?",
                    "author_fullname": "t2_njoeolf7v",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Polars Expressions Vs Series",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0mc2y",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.94,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 13,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 13,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756216064.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I came into Polars out of curiosity for the performance\u2026 and stayed for the rest! &lt;/p&gt;\n\n&lt;p&gt;After a couple of weeks using polars everyday, I can say I absolutely love it (chefs kissed for how amazing are Polar\u2019s docs\u2026 stop using LLMs/Stackoverflow altogether for questions regarding Polars). It has completely replaced pandas for me - smoke it out of the water.&lt;/p&gt;\n\n&lt;p&gt;But I\u2019m at the point that\u2019d like to start getting a more intuitive way of thinking about Expressions and Series. I get that Series are a data structure (their take on  arrays) whilst Expressions are &lt;strong&gt;&lt;em&gt;representation of a data transformation&lt;/em&gt;&lt;/strong&gt; to use in te context of a df method (I can conceptually grasp the difference between a data structure and a transformation)\u2026 But practically speaking, when for instance I\u2019d like to work with strings (say to replace or match a regex), I found myself with two very similar pages in their docs: pl.Expr.replace() and pl.Series.str.replace() (actually, polars.Expr.str.replace and polars.Series.str.replace are identical).&lt;/p&gt;\n\n&lt;p&gt;And I get that these are for two different uses based on the scope (I guess applying df-wide transformations vs a series-wide transformation?); but coming from Pandas I found myself choosing really nilly willy when to use or read the page of one versus the other\u2026 And would like to make a more conscious use/choice of when using one or the other. &lt;/p&gt;\n\n&lt;p&gt;Anybody else finding themselves in that situation? Or is just me? I would truly appreciate if someone could suggest a way to start thinking about Series vs Expression to get a sort of heuristic of how to tell them apart?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n0mc2y",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "miller_stale",
                    "discussion_type": null,
                    "num_comments": 2,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0mc2y/polars_expressions_vs_series/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0mc2y/polars_expressions_vs_series/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756216064.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hey everyone, I recently built a small project called **Smart Plug Notifier (SPN)**.\n\n**What My Project Does**: It uses **TP-Link Tapo smart plugs** to monitor when my washer and dryer start or finish their cycles. The system is built as an **async, event-driven microservice architecture** with **RabbitMQ** for messaging and a **Telegram bot** for notifications.\n\nFor my personal use I only run it on two plugs, but it\u2019s designed to support many devices. Everything is containerized with **Docker**, so it\u2019s easy to spin up the full stack (tapo service, notification service, and RabbitMQ).\n\nI\u2019m mainly using it to never forget my laundry again \ud83d\ude05, but it could work for any appliance you want real-time power usage alerts for.\n\n  \n**Target Audience:** Anyone who uses smart plugs (Tapo P110 in this case) and has a need for real time notifications.\n\nI\u2019d love to get some **feedback on the architecture, setup, or ideas for improvements**.  \nHere\u2019s the repo: \ud83d\udc49 [https://github.com/AleksaMCode/smart-plug-notifier](https://github.com/AleksaMCode/smart-plug-notifier)",
                    "author_fullname": "t2_1gczmxf9",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "I created a microservice system for real-time appliance monitoring",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0n55h",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.74,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 7,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 7,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756217997.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone, I recently built a small project called &lt;strong&gt;Smart Plug Notifier (SPN)&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;: It uses &lt;strong&gt;TP-Link Tapo smart plugs&lt;/strong&gt; to monitor when my washer and dryer start or finish their cycles. The system is built as an &lt;strong&gt;async, event-driven microservice architecture&lt;/strong&gt; with &lt;strong&gt;RabbitMQ&lt;/strong&gt; for messaging and a &lt;strong&gt;Telegram bot&lt;/strong&gt; for notifications.&lt;/p&gt;\n\n&lt;p&gt;For my personal use I only run it on two plugs, but it\u2019s designed to support many devices. Everything is containerized with &lt;strong&gt;Docker&lt;/strong&gt;, so it\u2019s easy to spin up the full stack (tapo service, notification service, and RabbitMQ).&lt;/p&gt;\n\n&lt;p&gt;I\u2019m mainly using it to never forget my laundry again \ud83d\ude05, but it could work for any appliance you want real-time power usage alerts for.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt; Anyone who uses smart plugs (Tapo P110 in this case) and has a need for real time notifications.&lt;/p&gt;\n\n&lt;p&gt;I\u2019d love to get some &lt;strong&gt;feedback on the architecture, setup, or ideas for improvements&lt;/strong&gt;.&lt;br/&gt;\nHere\u2019s the repo: \ud83d\udc49 &lt;a href=\"https://github.com/AleksaMCode/smart-plug-notifier\"&gt;https://github.com/AleksaMCode/smart-plug-notifier&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/YyugGGAsrjLVdpa4V00pLIhLMIqYWH5n5gjBIXgna14.png?auto=webp&amp;s=ad11e232562b996f869bcae266421d3b3b99d6fe",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/YyugGGAsrjLVdpa4V00pLIhLMIqYWH5n5gjBIXgna14.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=6b412180c9800020a67fa84eb53d33ba9c3b7687",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/YyugGGAsrjLVdpa4V00pLIhLMIqYWH5n5gjBIXgna14.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=63d3c38c1d6a40d9de69f6b3f62fb603c099110a",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/YyugGGAsrjLVdpa4V00pLIhLMIqYWH5n5gjBIXgna14.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=dd6394b048785ac5f7351dc61d82f3206bfc828d",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/YyugGGAsrjLVdpa4V00pLIhLMIqYWH5n5gjBIXgna14.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=4b826f9c8109f8ca1e5d245a4026599957089e58",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/YyugGGAsrjLVdpa4V00pLIhLMIqYWH5n5gjBIXgna14.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=31cfa9bccb159810a41bd8aaf950777319f574f0",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/YyugGGAsrjLVdpa4V00pLIhLMIqYWH5n5gjBIXgna14.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=081d5eeaecc5cada5944a3741110ed4af1e57141",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "YyugGGAsrjLVdpa4V00pLIhLMIqYWH5n5gjBIXgna14"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n0n55h",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "ssj_aleksa",
                    "discussion_type": null,
                    "num_comments": 5,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0n55h/i_created_a_microservice_system_for_realtime/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0n55h/i_created_a_microservice_system_for_realtime/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756217997.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hi, just this weekend I finalized the 1.0.0 version of my Tool, GenEC, and now I want the world to know ahah. I've already been using it for myself quite a lot of my own work, as well as subtly pushing my coworkers to start using it. I am confident many other people should be able to find a use for my tool as well, so if you're interested in using it, I am always happy to answer questions and provide support.\n\nRepository: [https://github.com/RemyKroese/GenEC](https://github.com/RemyKroese/GenEC)\n\n# What My Project Does\n\n*GenEC (Generic Extraction &amp; Comparison) is a Python-based tool for extracting structured data from files or folders. It offers a flexible, one-size-fits-all extraction framework that you can tailor precisely using configuration parameters.*\n\nIt is a tool that lets you extract and count occurrences of data using your own configurations. It can also compare this extracted data against reference files to spot differences. Your configurations can get saved as presets, so you can easily reuse them or automate the whole process by calling GenEC from other tools.\n\nOnce you have several presets, you can do batch analysis using a \"preset-list\" file, which is basically a collection of presets to run together. This scales you from analyzing single files to processing entire folders.\n\nTo summarize, there are 3 workflows for this tool:\n\n* **Basic:** for experimentation of configurations as well as getting acquainted with the tool\n* **Preset:** for single command data extraction (and comparison) using a preset\n* **Preset-list:** Enable batch processing by processing data in folders using a group of presets, all with only 1 command\n\nBeing a CLI tool, GenEC displays results in [neat tables](https://imgur.com/a/PnQxLGY) right in your terminal. But you can also export everything to CSV, JSON, YAML, or TXT files for further analysis. Which has the following benefits\n\n* **Human readable** output tables in CLI and TXT\n* **Machine-readable** output in CSV, JSON and YAML (for the AI enjoyers out there, YAML is likely the best input format for it :P)\n\nI have written extensive documentation on the tool within the repository, but to just link it here separately:\n\n* [README.md](https://github.com/RemyKroese/GenEC/blob/main/README.md)\n* [Documentation overview](https://github.com/RemyKroese/GenEC/blob/main/docs/overview.md)\n\n# Target Audience\n\nI like to believe my tool will be applicable for anyone who has the technical knowledge on how to use CLI tooling. The more, you work with data, the more you benefit from this of course:\n\n* Data engineers / analysts / scientists\n* Programmers\n* QA/Test engineers\n* Functions in a data reporting capacity: For example, my Scrum Master has been using it in order to provide data reporting to stakeholders, since we lack internal tooling for all the data we have.\n\n# Comparison\n\nIt competes with almost any data analysis tooling, which are:\n\n* Enterprise tooling\n* CLI tools / open source (diff / grep, etc.)\n\nI believe GenEC fulfills a nice middle-ground niche, as it creates structured output, allows for reusability and automation and has dynamic configuration parameters, whilst being a lightweight tool.",
                    "author_fullname": "t2_1veq1a0tua",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "GenEC v1.0.0 - A Python data extraction and comparison tool",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0t07s",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.81,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 3,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 3,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756231154.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, just this weekend I finalized the 1.0.0 version of my Tool, GenEC, and now I want the world to know ahah. I&amp;#39;ve already been using it for myself quite a lot of my own work, as well as subtly pushing my coworkers to start using it. I am confident many other people should be able to find a use for my tool as well, so if you&amp;#39;re interested in using it, I am always happy to answer questions and provide support.&lt;/p&gt;\n\n&lt;p&gt;Repository: &lt;a href=\"https://github.com/RemyKroese/GenEC\"&gt;https://github.com/RemyKroese/GenEC&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;&lt;em&gt;GenEC (Generic Extraction &amp;amp; Comparison) is a Python-based tool for extracting structured data from files or folders. It offers a flexible, one-size-fits-all extraction framework that you can tailor precisely using configuration parameters.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;It is a tool that lets you extract and count occurrences of data using your own configurations. It can also compare this extracted data against reference files to spot differences. Your configurations can get saved as presets, so you can easily reuse them or automate the whole process by calling GenEC from other tools.&lt;/p&gt;\n\n&lt;p&gt;Once you have several presets, you can do batch analysis using a &amp;quot;preset-list&amp;quot; file, which is basically a collection of presets to run together. This scales you from analyzing single files to processing entire folders.&lt;/p&gt;\n\n&lt;p&gt;To summarize, there are 3 workflows for this tool:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Basic:&lt;/strong&gt; for experimentation of configurations as well as getting acquainted with the tool&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Preset:&lt;/strong&gt; for single command data extraction (and comparison) using a preset&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Preset-list:&lt;/strong&gt; Enable batch processing by processing data in folders using a group of presets, all with only 1 command&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Being a CLI tool, GenEC displays results in &lt;a href=\"https://imgur.com/a/PnQxLGY\"&gt;neat tables&lt;/a&gt; right in your terminal. But you can also export everything to CSV, JSON, YAML, or TXT files for further analysis. Which has the following benefits&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Human readable&lt;/strong&gt; output tables in CLI and TXT&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Machine-readable&lt;/strong&gt; output in CSV, JSON and YAML (for the AI enjoyers out there, YAML is likely the best input format for it :P)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I have written extensive documentation on the tool within the repository, but to just link it here separately:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/RemyKroese/GenEC/blob/main/README.md\"&gt;README.md&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/RemyKroese/GenEC/blob/main/docs/overview.md\"&gt;Documentation overview&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;I like to believe my tool will be applicable for anyone who has the technical knowledge on how to use CLI tooling. The more, you work with data, the more you benefit from this of course:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Data engineers / analysts / scientists&lt;/li&gt;\n&lt;li&gt;Programmers&lt;/li&gt;\n&lt;li&gt;QA/Test engineers&lt;/li&gt;\n&lt;li&gt;Functions in a data reporting capacity: For example, my Scrum Master has been using it in order to provide data reporting to stakeholders, since we lack internal tooling for all the data we have.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;It competes with almost any data analysis tooling, which are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Enterprise tooling&lt;/li&gt;\n&lt;li&gt;CLI tools / open source (diff / grep, etc.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I believe GenEC fulfills a nice middle-ground niche, as it creates structured output, allows for reusability and automation and has dynamic configuration parameters, whilst being a lightweight tool.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/pK72KgQ7qgpVhdfvtj7pTnpFuxC6gmUMIO8uQv69SF0.jpg?auto=webp&amp;s=d531da8040f899b1f030dd9de3623750ffb7544b",
                                    "width": 543,
                                    "height": 493
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/pK72KgQ7qgpVhdfvtj7pTnpFuxC6gmUMIO8uQv69SF0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0d07633167a9a45aca552bf04f105e0bb94dc784",
                                        "width": 108,
                                        "height": 98
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/pK72KgQ7qgpVhdfvtj7pTnpFuxC6gmUMIO8uQv69SF0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3c5950d2ee1cd1caf0ca31b28c008d3c6e255a6d",
                                        "width": 216,
                                        "height": 196
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/pK72KgQ7qgpVhdfvtj7pTnpFuxC6gmUMIO8uQv69SF0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=d14bba5849b36b044a4ce33570011a45039c0ecd",
                                        "width": 320,
                                        "height": 290
                                    }
                                ],
                                "variants": {},
                                "id": "AHdUr7eTVu3GDIiZutWhAZFOz_uGEsjLvFCrYagI8f0"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n0t07s",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "EngineerRemy",
                    "discussion_type": null,
                    "num_comments": 2,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0t07s/genec_v100_a_python_data_extraction_and/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0t07s/genec_v100_a_python_data_extraction_and/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756231154.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "**What My Project Does**: An MCP server for JupyterCAD that allows you to control it using LLMs/natural language.\n\n**Target Audience:** Anyone interested in CAD + generative AI.\n\n**Comparison**: I couldn't find any other MCP servers for JupyterCAD(?)\n\nDemo: https://github.com/user-attachments/assets/7edb31b2-2c80-4096-9d9c-048ae27c54e7\n\nRepo: https://github.com/asmith26/jupytercad-mcp",
                    "author_fullname": "t2_gtogxmz35",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "jupytercad-mcp: Control JupyterCAD using LLMs/natural language.",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n10c30",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.67,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 1,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 1,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756248261.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;: An MCP server for JupyterCAD that allows you to control it using LLMs/natural language.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt; Anyone interested in CAD + generative AI.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;: I couldn&amp;#39;t find any other MCP servers for JupyterCAD(?)&lt;/p&gt;\n\n&lt;p&gt;Demo: &lt;a href=\"https://github.com/user-attachments/assets/7edb31b2-2c80-4096-9d9c-048ae27c54e7\"&gt;https://github.com/user-attachments/assets/7edb31b2-2c80-4096-9d9c-048ae27c54e7&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Repo: &lt;a href=\"https://github.com/asmith26/jupytercad-mcp\"&gt;https://github.com/asmith26/jupytercad-mcp&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n10c30",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Material_Pool_986",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n10c30/jupytercadmcp_control_jupytercad_using/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n10c30/jupytercadmcp_control_jupytercad_using/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756248261.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Came across a small project called PyWire-eel on GitHub and thought it was interesting.\n\nIt\u2019s similar to Eel (which recently got archived), but the idea is to provide a lightweight way to connect Python functions with a frontend built in HTML/CSS/JS. Basically you can call Python from JavaScript and the other way around without pulling in something heavy like Electron.\n\nRepo link: https://github.com/Fadi002/PyWire-eel\n\nCurious if anyone here has tried this kind of approach recently. Would you consider it useful, or would you just stick with PyWebView / Qt / Electron?\n",
                    "author_fullname": "t2_13qbax8thm",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "PyWire-eel, a lightweight Python library like eel",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0ufg0",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.76,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 2,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 2,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756234404.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Came across a small project called PyWire-eel on GitHub and thought it was interesting.&lt;/p&gt;\n\n&lt;p&gt;It\u2019s similar to Eel (which recently got archived), but the idea is to provide a lightweight way to connect Python functions with a frontend built in HTML/CSS/JS. Basically you can call Python from JavaScript and the other way around without pulling in something heavy like Electron.&lt;/p&gt;\n\n&lt;p&gt;Repo link: &lt;a href=\"https://github.com/Fadi002/PyWire-eel\"&gt;https://github.com/Fadi002/PyWire-eel&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Curious if anyone here has tried this kind of approach recently. Would you consider it useful, or would you just stick with PyWebView / Qt / Electron?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/0HCILbyt7MQR7RhRRmqcMna_W3-sHLXqbGeyohryTxo.png?auto=webp&amp;s=81b3f0084dbe9dc2a0d52ce16924cd95374d9eff",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/0HCILbyt7MQR7RhRRmqcMna_W3-sHLXqbGeyohryTxo.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=9d99cfb51355efa32a215821780c27c07ecc6cee",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/0HCILbyt7MQR7RhRRmqcMna_W3-sHLXqbGeyohryTxo.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=0c6c30d24b447e209440d377ed66fdff3c938980",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/0HCILbyt7MQR7RhRRmqcMna_W3-sHLXqbGeyohryTxo.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=4780877e16d2829562243450b42154b28504c341",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/0HCILbyt7MQR7RhRRmqcMna_W3-sHLXqbGeyohryTxo.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=9777b550f55ee00fbe69c2d3089d0e02ca3fe1e3",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/0HCILbyt7MQR7RhRRmqcMna_W3-sHLXqbGeyohryTxo.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=6de1d35cab67147243000921a55c71a687d74a8f",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/0HCILbyt7MQR7RhRRmqcMna_W3-sHLXqbGeyohryTxo.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2e850ec5bb29fa5f4b7be660b5f274b1a3d5c1c8",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "0HCILbyt7MQR7RhRRmqcMna_W3-sHLXqbGeyohryTxo"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n0ufg0",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Wrong-Cat-5014",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0ufg0/pywireeel_a_lightweight_python_library_like_eel/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0ufg0/pywireeel_a_lightweight_python_library_like_eel/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756234404.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "* **What My Project Does -** Take a screenshot by drawing a precise polygon rather than being limited to a rectangular or manual free-form shape\n* **Target Audience -** Meant for *production (For me, my professor just give notes pdf with everything jumbled together so I wanted to keep them organized, obviously on my note by taking screenshots of them)*\n* **Comparison -** I am a windows user, neither does windows provide default polygon screenshot tool nor are they available on anywhere else on internet\n* You can check it out on github: [https://github.com/sultanate-sultan/polygon-screenshot-tool](https://github.com/sultanate-sultan/polygon-screenshot-tool)\n* You can find the demo video on my github repo page",
                    "author_fullname": "t2_gw9k3p0z0",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "I created this polygon screenshot tool for myself, I must say it may be useful to others!",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1mzxbia",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.96,
                    "author_flair_background_color": "transparent",
                    "subreddit_type": "public",
                    "ups": 152,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": "23190a36-537c-11ee-bf5a-a2ab421cd045",
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 152,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Pythoneer"
                        }
                    ],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756143858.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "richtext",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;What My Project Does -&lt;/strong&gt; Take a screenshot by drawing a precise polygon rather than being limited to a rectangular or manual free-form shape&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Target Audience -&lt;/strong&gt; Meant for &lt;em&gt;production (For me, my professor just give notes pdf with everything jumbled together so I wanted to keep them organized, obviously on my note by taking screenshots of them)&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Comparison -&lt;/strong&gt; I am a windows user, neither does windows provide default polygon screenshot tool nor are they available on anywhere else on internet&lt;/li&gt;\n&lt;li&gt;You can check it out on github: &lt;a href=\"https://github.com/sultanate-sultan/polygon-screenshot-tool\"&gt;https://github.com/sultanate-sultan/polygon-screenshot-tool&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;You can find the demo video on my github repo page&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/ZwYtW4_8nQ14Q7_i6fiFOLpdcVoqZI5ELlg4rogVkhc.png?auto=webp&amp;s=c04a04e7fc3aa4ae53474167c0c0d19a724bb005",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/ZwYtW4_8nQ14Q7_i6fiFOLpdcVoqZI5ELlg4rogVkhc.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=1316512812b55555ac44c722b274302f558c85d7",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZwYtW4_8nQ14Q7_i6fiFOLpdcVoqZI5ELlg4rogVkhc.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=a5d7c179cc784c23a01ae4a6b6dc9b0b6bdbe479",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZwYtW4_8nQ14Q7_i6fiFOLpdcVoqZI5ELlg4rogVkhc.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=e0610b78fbf5b4040da5b52e2603738c1ef81ce7",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZwYtW4_8nQ14Q7_i6fiFOLpdcVoqZI5ELlg4rogVkhc.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=9f3103f691c7d16105e718276b43ebe0625b3d39",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZwYtW4_8nQ14Q7_i6fiFOLpdcVoqZI5ELlg4rogVkhc.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=2f1a2c02cf1182bc48708f77a87bf9e2a0b25f15",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZwYtW4_8nQ14Q7_i6fiFOLpdcVoqZI5ELlg4rogVkhc.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=563916c13a7068c9fca5a227484b40c0445381f7",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "ZwYtW4_8nQ14Q7_i6fiFOLpdcVoqZI5ELlg4rogVkhc"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": "Pythoneer",
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1mzxbia",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "sultanaiyan1098",
                    "discussion_type": null,
                    "num_comments": 15,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": "dark",
                    "permalink": "/r/Python/comments/1mzxbia/i_created_this_polygon_screenshot_tool_for_myself/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1mzxbia/i_created_this_polygon_screenshot_tool_for_myself/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756143858.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# \ud83e\udde0 What My Project Does\n\nmemory\\_graph is a visualization tool that shows what\u2019s really happening while Python code is executed:\n\n* how variables reference the same or different objects\n* changes to mutable vs immutable data types\n* function calls and variable scope\n* making shallow vs deep copies\n\nTo do this it generates a graph of the program state so you can literally see why your program behaves the way it does.\n\n# \ud83e\udde9 Here\u2019s a small example:\n\n    import copy\n    \n    def fun(c1, c2, c3, c4):\n        c1[0].append(1)\n        c2[0].append(2)\n        c3[0].append(3)\n        c4[0].append(4)\n    \n    mylist = [[0]]\n    c1 = mylist\n    c2 = mylist.copy()\n    c3 = copy.copy(mylist)\n    c4 = copy.deepcopy(mylist)\n    fun(c1, c2, c3, c4)\n    \n    print(mylist) # What output do you expect?\n\nWithout visualization beginners often guess wrong about the result, but with memory\\_graph the references and copies are clear.\n\n\ud83d\udc49 Run the example in: [Memory Graph Web Debugger](https://memory-graph.com/#code=import+copy%0A%0Adef+fun%28c1%2C+c2%2C+c3%2C+c4%29%3A%0A++++c1%5B0%5D.append%281%29%0A++++c2%5B0%5D.append%282%29%0A++++c3%5B0%5D.append%283%29%0A++++c4%5B0%5D.append%284%29%0A%0Amylist+%3D+%5B%5B0%5D%5D%0Ac1+%3D+mylist%0Ac2+%3D+mylist.copy%28%29%0Ac3+%3D+copy.copy%28mylist%29%0Ac4+%3D+copy.deepcopy%28mylist%29%0Afun%28c1%2C+c2%2C+c3%2C+c4%29%0A%0Aprint%28mylist%29%0A&amp;play)  \n\ud83d\udce6 Source code: [github.com/bterwijn/memory\\_graph](https://github.com/bterwijn/memory_graph)\n\n# \ud83c\udfaf Target Audience\n\n* Students dealing with references, copies, and mutability\n* Teachers/educators who want to explain Python\u2019s data model more effectively\n* Developers debugging complex programs with nested data structures\n\n# \ud83d\udd0d Comparison\n\nA well-known alternative is Python Tutor:\n\n* Python Tutor: browser-based, limited to small code snippets\n* memory\\_graph: runs locally and works in various IDEs (e.g., VSCode), supports large programs\n\nSo memory\\_graph is not just for teaching toy examples, but can stretch to helping with real-world debugging of production code.\n",
                    "author_fullname": "t2_al5aozqg",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Memory Graph Web Debugger",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0mgbv",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.7,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 4,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 4,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756216342.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;\ud83e\udde0 What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;memory_graph is a visualization tool that shows what\u2019s really happening while Python code is executed:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;how variables reference the same or different objects&lt;/li&gt;\n&lt;li&gt;changes to mutable vs immutable data types&lt;/li&gt;\n&lt;li&gt;function calls and variable scope&lt;/li&gt;\n&lt;li&gt;making shallow vs deep copies&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;To do this it generates a graph of the program state so you can literally see why your program behaves the way it does.&lt;/p&gt;\n\n&lt;h1&gt;\ud83e\udde9 Here\u2019s a small example:&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;import copy\n\ndef fun(c1, c2, c3, c4):\n    c1[0].append(1)\n    c2[0].append(2)\n    c3[0].append(3)\n    c4[0].append(4)\n\nmylist = [[0]]\nc1 = mylist\nc2 = mylist.copy()\nc3 = copy.copy(mylist)\nc4 = copy.deepcopy(mylist)\nfun(c1, c2, c3, c4)\n\nprint(mylist) # What output do you expect?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Without visualization beginners often guess wrong about the result, but with memory_graph the references and copies are clear.&lt;/p&gt;\n\n&lt;p&gt;\ud83d\udc49 Run the example in: &lt;a href=\"https://memory-graph.com/#code=import+copy%0A%0Adef+fun%28c1%2C+c2%2C+c3%2C+c4%29%3A%0A++++c1%5B0%5D.append%281%29%0A++++c2%5B0%5D.append%282%29%0A++++c3%5B0%5D.append%283%29%0A++++c4%5B0%5D.append%284%29%0A%0Amylist+%3D+%5B%5B0%5D%5D%0Ac1+%3D+mylist%0Ac2+%3D+mylist.copy%28%29%0Ac3+%3D+copy.copy%28mylist%29%0Ac4+%3D+copy.deepcopy%28mylist%29%0Afun%28c1%2C+c2%2C+c3%2C+c4%29%0A%0Aprint%28mylist%29%0A&amp;amp;play\"&gt;Memory Graph Web Debugger&lt;/a&gt;&lt;br/&gt;\n\ud83d\udce6 Source code: &lt;a href=\"https://github.com/bterwijn/memory_graph\"&gt;github.com/bterwijn/memory_graph&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;\ud83c\udfaf Target Audience&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Students dealing with references, copies, and mutability&lt;/li&gt;\n&lt;li&gt;Teachers/educators who want to explain Python\u2019s data model more effectively&lt;/li&gt;\n&lt;li&gt;Developers debugging complex programs with nested data structures&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;\ud83d\udd0d Comparison&lt;/h1&gt;\n\n&lt;p&gt;A well-known alternative is Python Tutor:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Python Tutor: browser-based, limited to small code snippets&lt;/li&gt;\n&lt;li&gt;memory_graph: runs locally and works in various IDEs (e.g., VSCode), supports large programs&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So memory_graph is not just for teaching toy examples, but can stretch to helping with real-world debugging of production code.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n0mgbv",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Sea-Ad7805",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0mgbv/memory_graph_web_debugger/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0mgbv/memory_graph_web_debugger/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756216342.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hi everyone \ud83d\udc4b\n\nI\u2019ve been working as a software engineer for about 10 years, and I wanted to start a small initiative to give programming practice a fresh twist. Instead of the usual abstract exercises, I\u2019m creating\u00a0*realistic bug-fixing scenarios*\u00a0inspired by problems you might face in actual projects.\n\nEvery week I\u2019ll be sharing a new \u201cbug to fix\u201d in the form of a Colab notebook (for now), so people can practice, learn, and reinforce concepts while thinking like engineers solving real-world issues.\n\nThis very first one is designed for beginners who are just starting out \ud83d\udc76, but the idea is to build a series with different levels:\u00a0*intern, junior, and semi-senior*. That way, people can grow step by step and tackle challenges that fit their journey.\n\nFor now, all exercises will be in Python \ud83d\udc0d, but I believe they could be just as valuable as a starting point for people who later want to work with other technologies too.\n\nPlease send me a private message and I will share the challenge with you.\n\nI\u2019d love to hear your feedback \ud83d\ude4f\u2014does this approach feel useful, fun, or motivating to you? Any suggestions to improve it are more than welcome!\n\nThanks a lot for taking a look \ud83d\udc99",
                    "author_fullname": "t2_16otfuv4ul",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "New weekly series: Realistic bug-fixing exercises for beginners",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Resource"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "resource",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0yj9r",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.38,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Resource",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756243844.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone \ud83d\udc4b&lt;/p&gt;\n\n&lt;p&gt;I\u2019ve been working as a software engineer for about 10 years, and I wanted to start a small initiative to give programming practice a fresh twist. Instead of the usual abstract exercises, I\u2019m creating\u00a0&lt;em&gt;realistic bug-fixing scenarios&lt;/em&gt;\u00a0inspired by problems you might face in actual projects.&lt;/p&gt;\n\n&lt;p&gt;Every week I\u2019ll be sharing a new \u201cbug to fix\u201d in the form of a Colab notebook (for now), so people can practice, learn, and reinforce concepts while thinking like engineers solving real-world issues.&lt;/p&gt;\n\n&lt;p&gt;This very first one is designed for beginners who are just starting out \ud83d\udc76, but the idea is to build a series with different levels:\u00a0&lt;em&gt;intern, junior, and semi-senior&lt;/em&gt;. That way, people can grow step by step and tackle challenges that fit their journey.&lt;/p&gt;\n\n&lt;p&gt;For now, all exercises will be in Python \ud83d\udc0d, but I believe they could be just as valuable as a starting point for people who later want to work with other technologies too.&lt;/p&gt;\n\n&lt;p&gt;Please send me a private message and I will share the challenge with you.&lt;/p&gt;\n\n&lt;p&gt;I\u2019d love to hear your feedback \ud83d\ude4f\u2014does this approach feel useful, fun, or motivating to you? Any suggestions to improve it are more than welcome!&lt;/p&gt;\n\n&lt;p&gt;Thanks a lot for taking a look \ud83d\udc99&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ddbd37",
                    "id": "1n0yj9r",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Fragrant_Steak_5",
                    "discussion_type": null,
                    "num_comments": 2,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0yj9r/new_weekly_series_realistic_bugfixing_exercises/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0yj9r/new_weekly_series_realistic_bugfixing_exercises/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756243844.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I\u2019ve been working on a project called **RareCodeBase**.\n\n**What My Project Does:** It\u2019s a free, open-source platform that brings together tutorials and resources on programming, ethical hacking, and related tools. The idea is to have one place to learn without ads or paywalls.\n\n  \n**Target Audience:** The platform is mainly aimed at students, beginners, and self-learners who want to get started with coding or security. Developers and security folks are also welcome to contribute tutorials or improvements.\n\n  \n**Comparison**: A lot of tutorial sites are paid, not open-source, or focused on just one area. RareCodeBase is MIT-licensed and open to contributions, so anyone can add tutorials, suggest features, or even host their own version. The goal is to keep it community-driven and free.\n\n  \nRight now, it\u2019s pretty minimal, but I\u2019m planning to grow it over time, possibly adding video tutorials and more structured content in the future.\n\nThe source code is available on GitHub: [github.com/RareCodeBase/Rare-Code-Base](https://github.com/RareCodeBase/Rare-Code-Base)\n\nAny feedback would be really helpful as I keep improving it.  \nContributions are also welcome if you\u2019d like to add tutorials, improve design, or suggest features.  \nAnd if you find it useful, leaving a star on GitHub would mean a lot.",
                    "author_fullname": "t2_1npp1k46lp",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "I built an open-source learning platform for ethical hacking, programming, and related tools",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0hpjs",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.58,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 5,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 5,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756202528.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I\u2019ve been working on a project called &lt;strong&gt;RareCodeBase&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does:&lt;/strong&gt; It\u2019s a free, open-source platform that brings together tutorials and resources on programming, ethical hacking, and related tools. The idea is to have one place to learn without ads or paywalls.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt; The platform is mainly aimed at students, beginners, and self-learners who want to get started with coding or security. Developers and security folks are also welcome to contribute tutorials or improvements.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;: A lot of tutorial sites are paid, not open-source, or focused on just one area. RareCodeBase is MIT-licensed and open to contributions, so anyone can add tutorials, suggest features, or even host their own version. The goal is to keep it community-driven and free.&lt;/p&gt;\n\n&lt;p&gt;Right now, it\u2019s pretty minimal, but I\u2019m planning to grow it over time, possibly adding video tutorials and more structured content in the future.&lt;/p&gt;\n\n&lt;p&gt;The source code is available on GitHub: &lt;a href=\"https://github.com/RareCodeBase/Rare-Code-Base\"&gt;github.com/RareCodeBase/Rare-Code-Base&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Any feedback would be really helpful as I keep improving it.&lt;br/&gt;\nContributions are also welcome if you\u2019d like to add tutorials, improve design, or suggest features.&lt;br/&gt;\nAnd if you find it useful, leaving a star on GitHub would mean a lot.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/ZC5B9Ul-RJUD7Xe5UKYFsBSZxs0XGLcjS6ZZF9Lj21s.png?auto=webp&amp;s=413df2c1ff471f5b5a3ce736a3aa1fbcc5dff29a",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/ZC5B9Ul-RJUD7Xe5UKYFsBSZxs0XGLcjS6ZZF9Lj21s.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=5abc207ae88b8b76c4ee43e7093c9bd426279505",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZC5B9Ul-RJUD7Xe5UKYFsBSZxs0XGLcjS6ZZF9Lj21s.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=3e116152731bd78de3b0b6a3c301fab56020bca3",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZC5B9Ul-RJUD7Xe5UKYFsBSZxs0XGLcjS6ZZF9Lj21s.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=84ab4bfb144d76b673e3c757e192078f343c277e",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZC5B9Ul-RJUD7Xe5UKYFsBSZxs0XGLcjS6ZZF9Lj21s.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=b7f4ef7b0c9f787b596432d3577751e613ec007f",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZC5B9Ul-RJUD7Xe5UKYFsBSZxs0XGLcjS6ZZF9Lj21s.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=0b8bf4c76d72dd50e1d14869a4a069db4be7349b",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/ZC5B9Ul-RJUD7Xe5UKYFsBSZxs0XGLcjS6ZZF9Lj21s.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=bc8afe34d57e91a89a906c95a935d585356db9d3",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "ZC5B9Ul-RJUD7Xe5UKYFsBSZxs0XGLcjS6ZZF9Lj21s"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n0hpjs",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Hello_World_00001",
                    "discussion_type": null,
                    "num_comments": 7,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0hpjs/i_built_an_opensource_learning_platform_for/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0hpjs/i_built_an_opensource_learning_platform_for/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756202528.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "My team at AMD is working on an open, universal way to run speedy LLMs locally on PCs, and we're building it in Python. I'm curious what the community here would think of the work, so here's a showcase post!\n\n**What My Project Does**\n\nLemonade runs LLMs on PCs by loading them into a server process with an inference engine. Then, users can:\n\n* Load up the web ui to get a GUI for chatting with the LLM and managing models.\n* Connect to other applications over the OpenAI API (chat, coding assistants, document/RAG search, etc.).\n* Try out optimized backends, such as ROCm 7 betas for Radeon GPUs or OnnxRuntime-GenAI for Ryzen AI NPUs.\n\n**Target Audience**\n\n* Users who want a dead-simple way to get started with LLMs. Especially if their PC has hardware like Ryzen AI NPU or a Radeon GPU that benefit from specialized optimization.\n* Developers who are building cross-platform LLM apps and don't want to worry about the details of setting up or optimizing LLMs for a wide range of PC hardware.\n\n**Comparison**\n\nLemonade is designed with the following 3 ideas in mind, which I think are essential for local LLMs. Each of the major alternatives has an inherent blocker that prevents them from doing at least 1 of these:\n\n1. Strictly open source.\n2. Auto-optimizes for any PC, including off-the-shelf llama.cpp, our own custom llama.cpp recipes (e.g., TheRock), or integrating non-llama.cpp engines (e.g., OnnxRuntime).\n3. Dead simple to use and build on with GUIs available for all features.\n\nAlso, it's the only local LLM server (AFAIK) written in Python! I wrote about the choice to use Python at length [here](https://www.amd.com/en/developer/resources/technical-articles/2025/rethinking-local-ai-lemonade-servers-python-advantage.html).\n\nGitHub: [https://github.com/lemonade-sdk/lemonade](https://github.com/lemonade-sdk/lemonade)",
                    "author_fullname": "t2_1m2ckixcqh",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Building a competitive local LLM server in Python",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n027ew",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.8,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 34,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 34,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756154876.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;My team at AMD is working on an open, universal way to run speedy LLMs locally on PCs, and we&amp;#39;re building it in Python. I&amp;#39;m curious what the community here would think of the work, so here&amp;#39;s a showcase post!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Lemonade runs LLMs on PCs by loading them into a server process with an inference engine. Then, users can:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Load up the web ui to get a GUI for chatting with the LLM and managing models.&lt;/li&gt;\n&lt;li&gt;Connect to other applications over the OpenAI API (chat, coding assistants, document/RAG search, etc.).&lt;/li&gt;\n&lt;li&gt;Try out optimized backends, such as ROCm 7 betas for Radeon GPUs or OnnxRuntime-GenAI for Ryzen AI NPUs.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Users who want a dead-simple way to get started with LLMs. Especially if their PC has hardware like Ryzen AI NPU or a Radeon GPU that benefit from specialized optimization.&lt;/li&gt;\n&lt;li&gt;Developers who are building cross-platform LLM apps and don&amp;#39;t want to worry about the details of setting up or optimizing LLMs for a wide range of PC hardware.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Lemonade is designed with the following 3 ideas in mind, which I think are essential for local LLMs. Each of the major alternatives has an inherent blocker that prevents them from doing at least 1 of these:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Strictly open source.&lt;/li&gt;\n&lt;li&gt;Auto-optimizes for any PC, including off-the-shelf llama.cpp, our own custom llama.cpp recipes (e.g., TheRock), or integrating non-llama.cpp engines (e.g., OnnxRuntime).&lt;/li&gt;\n&lt;li&gt;Dead simple to use and build on with GUIs available for all features.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Also, it&amp;#39;s the only local LLM server (AFAIK) written in Python! I wrote about the choice to use Python at length &lt;a href=\"https://www.amd.com/en/developer/resources/technical-articles/2025/rethinking-local-ai-lemonade-servers-python-advantage.html\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;GitHub: &lt;a href=\"https://github.com/lemonade-sdk/lemonade\"&gt;https://github.com/lemonade-sdk/lemonade&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/tXAQH-2IuxJHSCb05V5OiFQN-j9xlst_M-d3k_TkoOc.png?auto=webp&amp;s=370ef3c67fc9a466fb921e399215ca76e255bdd8",
                                    "width": 1435,
                                    "height": 645
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/tXAQH-2IuxJHSCb05V5OiFQN-j9xlst_M-d3k_TkoOc.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=0d6ab69b2057c1ff74bd4fad9be640864917203c",
                                        "width": 108,
                                        "height": 48
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/tXAQH-2IuxJHSCb05V5OiFQN-j9xlst_M-d3k_TkoOc.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=bc432f40f27f0a2f68d597fb271cdc9efc951403",
                                        "width": 216,
                                        "height": 97
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/tXAQH-2IuxJHSCb05V5OiFQN-j9xlst_M-d3k_TkoOc.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=39d76385ecda761edb0e6a264b0e3efd78c0cd1c",
                                        "width": 320,
                                        "height": 143
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/tXAQH-2IuxJHSCb05V5OiFQN-j9xlst_M-d3k_TkoOc.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=77ae8bc998e1523bb4c01bb0d57ef5cea220343f",
                                        "width": 640,
                                        "height": 287
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/tXAQH-2IuxJHSCb05V5OiFQN-j9xlst_M-d3k_TkoOc.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=c1e801ab47a7cb7d218797288798cd8f7d4e41fd",
                                        "width": 960,
                                        "height": 431
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/tXAQH-2IuxJHSCb05V5OiFQN-j9xlst_M-d3k_TkoOc.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=7d14e3dd033ec146ebe70b9e6b9135c50e7a9136",
                                        "width": 1080,
                                        "height": 485
                                    }
                                ],
                                "variants": {},
                                "id": "tXAQH-2IuxJHSCb05V5OiFQN-j9xlst_M-d3k_TkoOc"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n027ew",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "jfowers_amd",
                    "discussion_type": null,
                    "num_comments": 8,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n027ew/building_a_competitive_local_llm_server_in_python/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n027ew/building_a_competitive_local_llm_server_in_python/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756154876.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I asked a few months ago what ppl were using for hosting, and I was surprised by the number of people who were saying they host on a VPS or similar. Between config, scaling, DB hosting, and accessory services like for background tasks, I think a platform is often the most economic choice if you're attaching a $ value to your time [https://judoscale.com/blog/where-to-host-python-app](https://judoscale.com/blog/where-to-host-python-app)",
                    "author_fullname": "t2_vkvho9t7z",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Platforms &gt; self hosting python web apps",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0znzh",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.28,
                    "author_flair_background_color": "#b8001f",
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": "01f57bbe-537c-11ee-bb0d-6ef63b2ae5b9",
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [
                        {
                            "e": "text",
                            "t": "git push -f"
                        }
                    ],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756246566.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "richtext",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I asked a few months ago what ppl were using for hosting, and I was surprised by the number of people who were saying they host on a VPS or similar. Between config, scaling, DB hosting, and accessory services like for background tasks, I think a platform is often the most economic choice if you&amp;#39;re attaching a $ value to your time &lt;a href=\"https://judoscale.com/blog/where-to-host-python-app\"&gt;https://judoscale.com/blog/where-to-host-python-app&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/XQUQNfxF9I-GpqXHymCnuyIfYQHje6uYQ0xfOGIceyY.png?auto=webp&amp;s=05d3dce8b7e96d377cb55dbfa035e39988c47f4a",
                                    "width": 1200,
                                    "height": 630
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/XQUQNfxF9I-GpqXHymCnuyIfYQHje6uYQ0xfOGIceyY.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=af9c4b57055e25fb100a564b31397f37bc45c029",
                                        "width": 108,
                                        "height": 56
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/XQUQNfxF9I-GpqXHymCnuyIfYQHje6uYQ0xfOGIceyY.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=39a9677edd15e347f145c28fb07fea8f4e0655c5",
                                        "width": 216,
                                        "height": 113
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/XQUQNfxF9I-GpqXHymCnuyIfYQHje6uYQ0xfOGIceyY.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=1613536476e33ee8b3ea809bd89c2a8f37c13e9a",
                                        "width": 320,
                                        "height": 168
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/XQUQNfxF9I-GpqXHymCnuyIfYQHje6uYQ0xfOGIceyY.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=064f0e979d8f6b781b0fd8ea0a7f1ccb6c4f48b9",
                                        "width": 640,
                                        "height": 336
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/XQUQNfxF9I-GpqXHymCnuyIfYQHje6uYQ0xfOGIceyY.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=1ceba7247d6a8d8ff255772e43300fafd02ba400",
                                        "width": 960,
                                        "height": 504
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/XQUQNfxF9I-GpqXHymCnuyIfYQHje6uYQ0xfOGIceyY.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=1669fce110198d8ad069d08fc380e887c6ab3dbe",
                                        "width": 1080,
                                        "height": 567
                                    }
                                ],
                                "variants": {},
                                "id": "XQUQNfxF9I-GpqXHymCnuyIfYQHje6uYQ0xfOGIceyY"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": "git push -f",
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n0znzh",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "writingonruby",
                    "discussion_type": null,
                    "num_comments": 3,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": "light",
                    "permalink": "/r/Python/comments/1n0znzh/platforms_self_hosting_python_web_apps/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0znzh/platforms_self_hosting_python_web_apps/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756246566.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hello, everyone! This is the final release before v2.0.0. I finished most of the core browser features.\n\n# Added\n\n* **Enhanced Permission Handling:**\u00a0PySurf now features robust permission handling for website requests. Users will be prompted for explicit consent when a website attempts to access sensitive features such as:\n   * Geolocation\n   * Camera (Video Capture)\n   * Microphone (Audio Capture)\n   * Notifications\n   * Mouse Lock\n   * Desktop Video/Audio Capture\n   * Screen Sharing This enhancement provides greater privacy and control over your browsing experience ([aafc67e](https://github.com/VG-dev1/PySurf/commit/aafc67e08ea483e6750adbf8b6c7d7d6f62e2847))\n* **Integrated Developer Tools:**\u00a0Users now have access to powerful Chromium Developer Tools from the sidebar. This provides advanced debugging and inspection capabilities for web developers ([aafc67e](https://github.com/VG-dev1/PySurf/commit/aafc67e08ea483e6750adbf8b6c7d7d6f62e2847))\n\nCheck it out here:\u00a0[https://github.com/VG-dev1/PySurf](https://github.com/VG-dev1/PySurf)\n\nPS: Please, don't downvote.",
                    "author_fullname": "t2_em8c0lwt",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "PySurf v1.6.0 - added permission handling, and dev tools",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "News"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "news",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0owky",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.4,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "News",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756221993.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, everyone! This is the final release before v2.0.0. I finished most of the core browser features.&lt;/p&gt;\n\n&lt;h1&gt;Added&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Enhanced Permission Handling:&lt;/strong&gt;\u00a0PySurf now features robust permission handling for website requests. Users will be prompted for explicit consent when a website attempts to access sensitive features such as:\n\n&lt;ul&gt;\n&lt;li&gt;Geolocation&lt;/li&gt;\n&lt;li&gt;Camera (Video Capture)&lt;/li&gt;\n&lt;li&gt;Microphone (Audio Capture)&lt;/li&gt;\n&lt;li&gt;Notifications&lt;/li&gt;\n&lt;li&gt;Mouse Lock&lt;/li&gt;\n&lt;li&gt;Desktop Video/Audio Capture&lt;/li&gt;\n&lt;li&gt;Screen Sharing This enhancement provides greater privacy and control over your browsing experience (&lt;a href=\"https://github.com/VG-dev1/PySurf/commit/aafc67e08ea483e6750adbf8b6c7d7d6f62e2847\"&gt;aafc67e&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Integrated Developer Tools:&lt;/strong&gt;\u00a0Users now have access to powerful Chromium Developer Tools from the sidebar. This provides advanced debugging and inspection capabilities for web developers (&lt;a href=\"https://github.com/VG-dev1/PySurf/commit/aafc67e08ea483e6750adbf8b6c7d7d6f62e2847\"&gt;aafc67e&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Check it out here:\u00a0&lt;a href=\"https://github.com/VG-dev1/PySurf\"&gt;https://github.com/VG-dev1/PySurf&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;PS: Please, don&amp;#39;t downvote.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/cknZQJEBpAE-acVcXlPw5nQFnd5-2ayxc9f2-OMbOZU.png?auto=webp&amp;s=eac6717e1024c27458f823900edf65c07a848200",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/cknZQJEBpAE-acVcXlPw5nQFnd5-2ayxc9f2-OMbOZU.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=3a05c2533b7655bbe31b0a956ae037f2535a727d",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/cknZQJEBpAE-acVcXlPw5nQFnd5-2ayxc9f2-OMbOZU.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=da987ebda89c5ca5898ce3af3fc9e31298413e6e",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/cknZQJEBpAE-acVcXlPw5nQFnd5-2ayxc9f2-OMbOZU.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=d181ef58674f978d4e0aabc8c5623b919efa2de5",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/cknZQJEBpAE-acVcXlPw5nQFnd5-2ayxc9f2-OMbOZU.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=5101f57b194514d8f8bfa0815dd68f65353b593d",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/cknZQJEBpAE-acVcXlPw5nQFnd5-2ayxc9f2-OMbOZU.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=8c8cfe539559a1397c8d6a9976bb13c5d16be3c2",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/cknZQJEBpAE-acVcXlPw5nQFnd5-2ayxc9f2-OMbOZU.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=da5776d3fa6da83935b5e60a8df319b3809dced5",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "cknZQJEBpAE-acVcXlPw5nQFnd5-2ayxc9f2-OMbOZU"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#7193ff",
                    "id": "1n0owky",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Apart-Television4396",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0owky/pysurf_v160_added_permission_handling_and_dev/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0owky/pysurf_v160_added_permission_handling_and_dev/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756221993.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "# What My Project Does\n\nI built **Apple Notes MCP Server**, a tool that integrates Apple Notes with the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol). It provides a bridge between your notes and MCP-compatible clients (like Claude Desktop, [Continue.dev](http://Continue.dev), or Perplexity).\n\nWith this, you can fully **automate Apple Notes from Python** \u2014 from managing notes to organizing folders \u2014 all via a clean MCP interface.\n\n# Features\n\n* Full **CRUD support** for both notes and folders (create, read, update/rename, delete, move)\n* **Search &amp; structure tools** to query notes and view folder hierarchies\n* Supports **rich HTML content** (headers, lists, tables, links, emoji \ud83d\ude80\ud83d\udcdd)\n* Works seamlessly with **multiple MCP clients** (Claude Desktop, [Continue.dev](http://Continue.dev), Perplexity, etc.)\n\n# Quick Start\n\n1. **Install uv** (if not already installed)\n\n&amp;#8203;\n\n    curl -LsSf https://astral.sh/uv/install.sh | sh\n\n1. **Add MCP configuration** to your client (e.g., [Continue.dev](http://Continue.dev), Claude Desktop):\n\n&amp;#8203;\n\n    {\n      \"mcpServers\": {\n        \"apple-notes\": {\n          \"command\": \"uvx\",\n          \"args\": [\"mcp-apple-notes@latest\"]\n        }\n      }\n    }\n\nThat\u2019s it \u2014 your MCP client will install and run the package automatically.\n\n# Links\n\n\ud83d\udce6 PyPI: [https://pypi.org/project/mcp-apple-notes/](https://pypi.org/project/mcp-apple-notes/)\n\n\ud83d\udcbb Source Code: [https://github.com/henilcalagiya/mcp-apple-notes](https://github.com/henilcalagiya/mcp-apple-notes)\n\n# Target Audience\n\n* **Developers** who want to automate or script Apple Notes workflows.\n* **AI/LLM users** who\u2019d like to use their personal notes as context in AI tools.\n* **macOS power users** who want better control of Apple Notes through automation.This project is in **beta** but stable enough for experimentation and light productivity use.\n\n# Comparison\n\n* Unlike general Apple Notes automation scripts, this project uses **MCP (Model Context Protocol)**, which means it plugs directly into multiple AI/LLM clients.\n* It provides **full CRUD for both notes and folders** (many existing scripts only handle basic read/write).\n* It supports **rich HTML formatting, search, and folder hierarchies** \u2014 making it more feature-complete than simple AppleScript snippets.\n* Built to be **modular and extendable** for future MCP integrations.\n\nWould love to hear your thoughts, feedback, or use-cases you see for this.",
                    "author_fullname": "t2_1gaj2oeiri",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Apple Notes MCP Server \u2013 Connect your Apple Notes with LLMs.",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Showcase"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "showcase",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0tlht",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.27,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Showcase",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756232473.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;I built &lt;strong&gt;Apple Notes MCP Server&lt;/strong&gt;, a tool that integrates Apple Notes with the &lt;a href=\"https://github.com/modelcontextprotocol\"&gt;Model Context Protocol (MCP)&lt;/a&gt;. It provides a bridge between your notes and MCP-compatible clients (like Claude Desktop, &lt;a href=\"http://Continue.dev\"&gt;Continue.dev&lt;/a&gt;, or Perplexity).&lt;/p&gt;\n\n&lt;p&gt;With this, you can fully &lt;strong&gt;automate Apple Notes from Python&lt;/strong&gt; \u2014 from managing notes to organizing folders \u2014 all via a clean MCP interface.&lt;/p&gt;\n\n&lt;h1&gt;Features&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Full &lt;strong&gt;CRUD support&lt;/strong&gt; for both notes and folders (create, read, update/rename, delete, move)&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Search &amp;amp; structure tools&lt;/strong&gt; to query notes and view folder hierarchies&lt;/li&gt;\n&lt;li&gt;Supports &lt;strong&gt;rich HTML content&lt;/strong&gt; (headers, lists, tables, links, emoji \ud83d\ude80\ud83d\udcdd)&lt;/li&gt;\n&lt;li&gt;Works seamlessly with &lt;strong&gt;multiple MCP clients&lt;/strong&gt; (Claude Desktop, &lt;a href=\"http://Continue.dev\"&gt;Continue.dev&lt;/a&gt;, Perplexity, etc.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Quick Start&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Install uv&lt;/strong&gt; (if not already installed)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&amp;#8203;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;curl -LsSf https://astral.sh/uv/install.sh | sh\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Add MCP configuration&lt;/strong&gt; to your client (e.g., &lt;a href=\"http://Continue.dev\"&gt;Continue.dev&lt;/a&gt;, Claude Desktop):&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&amp;#8203;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n  &amp;quot;mcpServers&amp;quot;: {\n    &amp;quot;apple-notes&amp;quot;: {\n      &amp;quot;command&amp;quot;: &amp;quot;uvx&amp;quot;,\n      &amp;quot;args&amp;quot;: [&amp;quot;mcp-apple-notes@latest&amp;quot;]\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That\u2019s it \u2014 your MCP client will install and run the package automatically.&lt;/p&gt;\n\n&lt;h1&gt;Links&lt;/h1&gt;\n\n&lt;p&gt;\ud83d\udce6 PyPI: &lt;a href=\"https://pypi.org/project/mcp-apple-notes/\"&gt;https://pypi.org/project/mcp-apple-notes/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;\ud83d\udcbb Source Code: &lt;a href=\"https://github.com/henilcalagiya/mcp-apple-notes\"&gt;https://github.com/henilcalagiya/mcp-apple-notes&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Developers&lt;/strong&gt; who want to automate or script Apple Notes workflows.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;AI/LLM users&lt;/strong&gt; who\u2019d like to use their personal notes as context in AI tools.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;macOS power users&lt;/strong&gt; who want better control of Apple Notes through automation.This project is in &lt;strong&gt;beta&lt;/strong&gt; but stable enough for experimentation and light productivity use.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Unlike general Apple Notes automation scripts, this project uses &lt;strong&gt;MCP (Model Context Protocol)&lt;/strong&gt;, which means it plugs directly into multiple AI/LLM clients.&lt;/li&gt;\n&lt;li&gt;It provides &lt;strong&gt;full CRUD for both notes and folders&lt;/strong&gt; (many existing scripts only handle basic read/write).&lt;/li&gt;\n&lt;li&gt;It supports &lt;strong&gt;rich HTML formatting, search, and folder hierarchies&lt;/strong&gt; \u2014 making it more feature-complete than simple AppleScript snippets.&lt;/li&gt;\n&lt;li&gt;Built to be &lt;strong&gt;modular and extendable&lt;/strong&gt; for future MCP integrations.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Would love to hear your thoughts, feedback, or use-cases you see for this.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/8lBwgtz0GifbCTXgYXAe7KwHqB6r9d6n6NtOb1minSs.png?auto=webp&amp;s=686c93b395f20d312be0379d158ae4e2d731b944",
                                    "width": 280,
                                    "height": 280
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/8lBwgtz0GifbCTXgYXAe7KwHqB6r9d6n6NtOb1minSs.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=3ad6a7b78d99e504bc515c83cbb4a5e75372c770",
                                        "width": 108,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/8lBwgtz0GifbCTXgYXAe7KwHqB6r9d6n6NtOb1minSs.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=6bdd63c35158b4c37a8f8551569f704d14850df4",
                                        "width": 216,
                                        "height": 216
                                    }
                                ],
                                "variants": {},
                                "id": "8lBwgtz0GifbCTXgYXAe7KwHqB6r9d6n6NtOb1minSs"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ff66ac",
                    "id": "1n0tlht",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "watchmoviestime",
                    "discussion_type": null,
                    "num_comments": 0,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0tlht/apple_notes_mcp_server_connect_your_apple_notes/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0tlht/apple_notes_mcp_server_connect_your_apple_notes/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756232473.0,
                    "num_crossposts": 1,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hey folks,\n\nI\u2019ve been tinkering with an idea to extend Python\u2019s built-in `multiprocessing` by adding a concept I call **compute\\_venvs** (like virtual environments, but for compute). The idea is to let you define resource-scoped pools that know about CPU cores, NUMA nodes, GPUs, I/O limits, and even niceness/cgroups, and then route tasks accordingly.\n\n`from compute_venv import VEnv, VPool`\n\n`cpu0 = VEnv(name=\"cpu0_fast\", cpu_cores=[0,1,2,3], numa_node=0, nice=5)`\n\n`gpu0 = VEnv(name=\"gpu0\", gpu=\"cuda:0\")`\n\n`with VPool([cpu0, gpu0]) as pool:`\n\n`pool.submit(cpu_heavy_fn, data, hint=\"cpu0_fast\")`\n\n`pool.submit(gpu_heavy_fn, data, hint=\"gpu0\")`\n\nThe module would:\n\n* Add **affinity and isolation** (set process affinity, NUMA binding, GPU selection, nice priority).\n* Provide an **auto-tuning scheduler** that benchmarks chunk sizes/queue depth and routes tasks to the best venv.\n* Remain **stdlib-compatible**: you can swap in/out `multiprocessing` pools with almost no code change.\n* Target single-machine jobs: preprocessing, simulation, ML data prep, video/audio encoding, etc.\n\nIt\u2019s meant as a **lightweight alternative to Ray/Dask** for cases where you don\u2019t need distributed orchestration, just better hardware-aware tasking on one box.\n\n**Questions for you all:**\n\n1. Would this be useful in your workflows, or is it too niche?\n2. Do you think sticking close to `multiprocessing` API is the right approach, or should it be more opinionated?\n3. Any obvious \u201cgotchas\u201d I should be aware of (esp. cross-platform)?\n4. Benchmarks I should definitely include to prove value?\n\nThanks! I\u2019d love to hear your perspectives before I get dirty with this.",
                    "author_fullname": "t2_qmfriki1",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Would a \"venv\" wrapper around multiprocessing be useful? (hardware-aware pools, NUMA, GPU, etc.)",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0tgja",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.27,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756232159.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey folks,&lt;/p&gt;\n\n&lt;p&gt;I\u2019ve been tinkering with an idea to extend Python\u2019s built-in &lt;code&gt;multiprocessing&lt;/code&gt; by adding a concept I call &lt;strong&gt;compute_venvs&lt;/strong&gt; (like virtual environments, but for compute). The idea is to let you define resource-scoped pools that know about CPU cores, NUMA nodes, GPUs, I/O limits, and even niceness/cgroups, and then route tasks accordingly.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;from compute_venv import VEnv, VPool&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;cpu0 = VEnv(name=&amp;quot;cpu0_fast&amp;quot;, cpu_cores=[0,1,2,3], numa_node=0, nice=5)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;gpu0 = VEnv(name=&amp;quot;gpu0&amp;quot;, gpu=&amp;quot;cuda:0&amp;quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;with VPool([cpu0, gpu0]) as pool:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pool.submit(cpu_heavy_fn, data, hint=&amp;quot;cpu0_fast&amp;quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pool.submit(gpu_heavy_fn, data, hint=&amp;quot;gpu0&amp;quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The module would:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Add &lt;strong&gt;affinity and isolation&lt;/strong&gt; (set process affinity, NUMA binding, GPU selection, nice priority).&lt;/li&gt;\n&lt;li&gt;Provide an &lt;strong&gt;auto-tuning scheduler&lt;/strong&gt; that benchmarks chunk sizes/queue depth and routes tasks to the best venv.&lt;/li&gt;\n&lt;li&gt;Remain &lt;strong&gt;stdlib-compatible&lt;/strong&gt;: you can swap in/out &lt;code&gt;multiprocessing&lt;/code&gt; pools with almost no code change.&lt;/li&gt;\n&lt;li&gt;Target single-machine jobs: preprocessing, simulation, ML data prep, video/audio encoding, etc.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It\u2019s meant as a &lt;strong&gt;lightweight alternative to Ray/Dask&lt;/strong&gt; for cases where you don\u2019t need distributed orchestration, just better hardware-aware tasking on one box.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Questions for you all:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Would this be useful in your workflows, or is it too niche?&lt;/li&gt;\n&lt;li&gt;Do you think sticking close to &lt;code&gt;multiprocessing&lt;/code&gt; API is the right approach, or should it be more opinionated?&lt;/li&gt;\n&lt;li&gt;Any obvious \u201cgotchas\u201d I should be aware of (esp. cross-platform)?&lt;/li&gt;\n&lt;li&gt;Benchmarks I should definitely include to prove value?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Thanks! I\u2019d love to hear your perspectives before I get dirty with this.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n0tgja",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Beginning_Task_5515",
                    "discussion_type": null,
                    "num_comments": 2,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0tgja/would_a_venv_wrapper_around_multiprocessing_be/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0tgja/would_a_venv_wrapper_around_multiprocessing_be/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756232159.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "Hi everyone \ud83d\udc4b\n\nI wanted to share a project I hacked together over two weekends: a cross-platform System Monitor inspired by GNOME\u2019s monitor, but written entirely in Python using PyQt5 and psutil.\n\nI\u2019ve always relied on system monitors in my workflow, but I kept running into limitations (especially on Windows and some Linux distros where I couldn\u2019t find a good alternative). So I tried building my own, combining:\n\t\u2022\tpsutil \u2192 to access CPU, memory, processes, disk I/O, network\n\t\u2022\tPyQt5 \u2192 for the GUI (tabs, preferences dialog, per-core plots)\n\t\u2022\tpyqtgraph \u2192 for real-time plots with configurable smoothing (EMA)\n\nMain features so far:\n\t\u2022\tMulti-thread, general, and per-core multi-window CPU views\n\t\u2022\tAdjustable refresh intervals, grids, antialiasing, line widths, colors\n\t\u2022\tInspect/filter/kill processes directly\n\t\u2022\tMemory, swap, and network monitoring\n\t\u2022\tFile systems + disk I/O\n\t\u2022\tSeveral built-in themes (light to deep dark)\n\n\ud83d\udce6 Installation:\n\npip install klv-system-monitor\n\n\ud83d\udc49 Repo + screenshots:\n\nhttps://github.com/karellopez/KLV-System-Monitor\n\nIt\u2019s still early days, but it already replaced the other monitors I used daily.\nWould love feedback, especially from those with experience optimizing PyQt5/psutil apps. \ud83d\ude80",
                    "author_fullname": "t2_mpwt5wav",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "[Project] Weekend project: System Monitor in Python with PyQt5",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Resource"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "resource",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n03s8h",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.74,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 5,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Resource",
                    "can_mod_post": false,
                    "score": 5,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "post_hint": "self",
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756158511.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone \ud83d\udc4b&lt;/p&gt;\n\n&lt;p&gt;I wanted to share a project I hacked together over two weekends: a cross-platform System Monitor inspired by GNOME\u2019s monitor, but written entirely in Python using PyQt5 and psutil.&lt;/p&gt;\n\n&lt;p&gt;I\u2019ve always relied on system monitors in my workflow, but I kept running into limitations (especially on Windows and some Linux distros where I couldn\u2019t find a good alternative). So I tried building my own, combining:\n    \u2022 psutil \u2192 to access CPU, memory, processes, disk I/O, network\n    \u2022 PyQt5 \u2192 for the GUI (tabs, preferences dialog, per-core plots)\n    \u2022 pyqtgraph \u2192 for real-time plots with configurable smoothing (EMA)&lt;/p&gt;\n\n&lt;p&gt;Main features so far:\n    \u2022 Multi-thread, general, and per-core multi-window CPU views\n    \u2022 Adjustable refresh intervals, grids, antialiasing, line widths, colors\n    \u2022 Inspect/filter/kill processes directly\n    \u2022 Memory, swap, and network monitoring\n    \u2022 File systems + disk I/O\n    \u2022 Several built-in themes (light to deep dark)&lt;/p&gt;\n\n&lt;p&gt;\ud83d\udce6 Installation:&lt;/p&gt;\n\n&lt;p&gt;pip install klv-system-monitor&lt;/p&gt;\n\n&lt;p&gt;\ud83d\udc49 Repo + screenshots:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/karellopez/KLV-System-Monitor\"&gt;https://github.com/karellopez/KLV-System-Monitor&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It\u2019s still early days, but it already replaced the other monitors I used daily.\nWould love feedback, especially from those with experience optimizing PyQt5/psutil apps. \ud83d\ude80&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "preview": {
                        "images": [
                            {
                                "source": {
                                    "url": "https://external-preview.redd.it/GwWABXkFvmyI_rfNPwuVJEL5WxF-f6TsW_rVuR7wTrE.png?auto=webp&amp;s=442711f8b4d7d99a7d49c7f14a224096ae2f2dff",
                                    "width": 1200,
                                    "height": 600
                                },
                                "resolutions": [
                                    {
                                        "url": "https://external-preview.redd.it/GwWABXkFvmyI_rfNPwuVJEL5WxF-f6TsW_rVuR7wTrE.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=db9ae678c20415ac2bc9e99563b8639b92dcd335",
                                        "width": 108,
                                        "height": 54
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GwWABXkFvmyI_rfNPwuVJEL5WxF-f6TsW_rVuR7wTrE.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=388041d30f23000356cc09bfc3ea13913a459f76",
                                        "width": 216,
                                        "height": 108
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GwWABXkFvmyI_rfNPwuVJEL5WxF-f6TsW_rVuR7wTrE.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=0a6d5dc6cf93c336d4daf2e8ebf14ab2730acece",
                                        "width": 320,
                                        "height": 160
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GwWABXkFvmyI_rfNPwuVJEL5WxF-f6TsW_rVuR7wTrE.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=ba72b716057d6a79fe17f00e889197eefebb30be",
                                        "width": 640,
                                        "height": 320
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GwWABXkFvmyI_rfNPwuVJEL5WxF-f6TsW_rVuR7wTrE.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=77851bd828655d415059d2d2fb12eb805787dd53",
                                        "width": 960,
                                        "height": 480
                                    },
                                    {
                                        "url": "https://external-preview.redd.it/GwWABXkFvmyI_rfNPwuVJEL5WxF-f6TsW_rVuR7wTrE.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=71cad7dc88cccf93bdff4e87b17805a2b2a821bb",
                                        "width": 1080,
                                        "height": 540
                                    }
                                ],
                                "variants": {},
                                "id": "GwWABXkFvmyI_rfNPwuVJEL5WxF-f6TsW_rVuR7wTrE"
                            }
                        ],
                        "enabled": false
                    },
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#ddbd37",
                    "id": "1n03s8h",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Apprehensive_Sea_302",
                    "discussion_type": null,
                    "num_comments": 2,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n03s8h/project_weekend_project_system_monitor_in_python/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n03s8h/project_weekend_project_system_monitor_in_python/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756158511.0,
                    "num_crossposts": 1,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I was just recently working on some code where I wanted controlled access to a list attribute (i.e., ensure every element is &gt; 0 say). I naively started writing a descriptor but didn't get very far before realizing that neither `__set__()` nor` __setitem__()` (nor any other dunder method) would do the trick. This seems odd, as having controlled access to a list attribute via getters and setters would be useful, and consistent with other object types.\n\nOne could subclass list and override the append/extend methods with the desired behaviour, but I don't really understand why the descriptor pattern couldn't be applied to a list in the usual manner?",
                    "author_fullname": "t2_5hr4v",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Why no dunder methods for list append/extend?",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0r5qd",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.33,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756227097.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was just recently working on some code where I wanted controlled access to a list attribute (i.e., ensure every element is &amp;gt; 0 say). I naively started writing a descriptor but didn&amp;#39;t get very far before realizing that neither &lt;code&gt;__set__()&lt;/code&gt; nor&lt;code&gt;__setitem__()&lt;/code&gt; (nor any other dunder method) would do the trick. This seems odd, as having controlled access to a list attribute via getters and setters would be useful, and consistent with other object types.&lt;/p&gt;\n\n&lt;p&gt;One could subclass list and override the append/extend methods with the desired behaviour, but I don&amp;#39;t really understand why the descriptor pattern couldn&amp;#39;t be applied to a list in the usual manner?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1n0r5qd",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "QuasiEvil",
                    "discussion_type": null,
                    "num_comments": 29,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0r5qd/why_no_dunder_methods_for_list_appendextend/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0r5qd/why_no_dunder_methods_for_list_appendextend/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756227097.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "I've been rolling out the oddest fix across my async code today, and its one of those that feels dirty to say the least.\n\nData pipeline has 2 long running asyncio.gather() tasks:\n\n* 1 reads 6k rows over websocket every 100ms and stores them to a global dict of dicts\n* 2 ETLs a deepcopy of the dicts and dumps it to a DB.\n\nAfter \\~30sec of running, this job gets insanely slow.\n\n    04:42:01 PM Processed 6745 async_run_batch_insert in 159.8427 ms\n    04:42:02 PM Processed 6711 async_run_batch_insert in 162.3137 ms\n    ...\n    04:42:09 PM Processed 6712 async_run_batch_insert in 5489.2745 ms\n\nUp to 5k rows, this job was happily running for months. Once I scaled it up beyond 5k rows, it hit this random slowdown.\n\nAdding an \\`asyncio.sleep(0)\\` at the end of my function completely got rid of the \"slow\" runs and its consistently 150-160ms for days with the full 6700 rows. Pseudocode:\n\n    async def etl_to_db():\n      # grab a deepcopy of the global msg cache\n      # etl it\n      # await dump_to_db(etl_msg)\n      await asyncio.sleep(0)  # &lt;-- This \"fixed it\"\n    \n    \n    async def dump_books_to_db():\n      while True:\n        # Logic to check the ws is connected\n        await etl_to_db()\n        await asyncio.sleep(0.1)\n    \n    await asyncio.gather(\n      dump_books_to_db(),\n      sub_websocket()\n     )\n\nI believe the sleep yields control back to the GIL? Both gpt and grok were a bit useless in debugging this, and kept trying to approach it from the database schema being the reason for the slowdown.\n\nGiven we're in 2025 and python 3.11, this feels insanely hacky... but it works. am I missing something",
                    "author_fullname": "t2_4oo4p",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "Adding asyncio.sleep(0) made my data pipeline (150 ms) not spike to (5500 ms)",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "Discussion"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "discussion",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1mzcxyc",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.89,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 155,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "Discussion",
                    "can_mod_post": false,
                    "score": 155,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": 1756087131.0,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756083645.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been rolling out the oddest fix across my async code today, and its one of those that feels dirty to say the least.&lt;/p&gt;\n\n&lt;p&gt;Data pipeline has 2 long running asyncio.gather() tasks:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;1 reads 6k rows over websocket every 100ms and stores them to a global dict of dicts&lt;/li&gt;\n&lt;li&gt;2 ETLs a deepcopy of the dicts and dumps it to a DB.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;After ~30sec of running, this job gets insanely slow.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;04:42:01 PM Processed 6745 async_run_batch_insert in 159.8427 ms\n04:42:02 PM Processed 6711 async_run_batch_insert in 162.3137 ms\n...\n04:42:09 PM Processed 6712 async_run_batch_insert in 5489.2745 ms\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Up to 5k rows, this job was happily running for months. Once I scaled it up beyond 5k rows, it hit this random slowdown.&lt;/p&gt;\n\n&lt;p&gt;Adding an `asyncio.sleep(0)` at the end of my function completely got rid of the &amp;quot;slow&amp;quot; runs and its consistently 150-160ms for days with the full 6700 rows. Pseudocode:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;async def etl_to_db():\n  # grab a deepcopy of the global msg cache\n  # etl it\n  # await dump_to_db(etl_msg)\n  await asyncio.sleep(0)  # &amp;lt;-- This &amp;quot;fixed it&amp;quot;\n\n\nasync def dump_books_to_db():\n  while True:\n    # Logic to check the ws is connected\n    await etl_to_db()\n    await asyncio.sleep(0.1)\n\nawait asyncio.gather(\n  dump_books_to_db(),\n  sub_websocket()\n )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I believe the sleep yields control back to the GIL? Both gpt and grok were a bit useless in debugging this, and kept trying to approach it from the database schema being the reason for the slowdown.&lt;/p&gt;\n\n&lt;p&gt;Given we&amp;#39;re in 2025 and python 3.11, this feels insanely hacky... but it works. am I missing something&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": false,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#f50057",
                    "id": "1mzcxyc",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Chuyito",
                    "discussion_type": null,
                    "num_comments": 37,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1mzcxyc/adding_asynciosleep0_made_my_data_pipeline_150_ms/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1mzcxyc/adding_asynciosleep0_made_my_data_pipeline_150_ms/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756083645.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            },
            {
                "kind": "t3",
                "data": {
                    "approved_at_utc": null,
                    "subreddit": "Python",
                    "selftext": "\u5927\u5bb6\u597d\uff0c\u6211\u521a\u5f00\u59cb\u5b66\u4e60 Python\uff0c\u76ee\u524d\u770b\u5b8c\u4e86 3\u20134 \u7ae0\u57fa\u7840\u8bed\u6cd5\uff0c\u4f1a\u5199\u7b80\u5355\u7684 if \u5224\u65ad\u3001for \u5faa\u73af\u548c\u51fd\u6570\u3002\n\n\u6211\u7684\u76ee\u6807\u662f\u4ee5\u540e\u80fd\u7528 Python \u505a\u6570\u636e\u5206\u6790\uff0c\u6216\u8005\u5199\u4e00\u4e9b\u5c0f\u5de5\u5177\u3002\n\n\u4f46\u73b0\u5728\u6709\u70b9\u56f0\u60d1\uff1a\u5e94\u8be5\u7ee7\u7eed\u6253\u7262\u8bed\u6cd5\u57fa\u7840\uff0c\u8fd8\u662f\u76f4\u63a5\u4e0a\u624b\u505a\u4e00\u4e9b\u5c0f\u9879\u76ee\uff1f\n\n\u53e6\u5916\uff0c\u5927\u5bb6\u5728\u521a\u5165\u95e8\u7684\u65f6\u5019\uff0c\u6709\u54ea\u4e9b\u63a8\u8350\u7684\u4e66\u7c4d\u3001\u7f51\u7ad9\u6216\u8005\u7ec3\u624b\u9879\u76ee\uff1f\n\n\u975e\u5e38\u611f\u8c22\u5927\u5bb6\u7684\u5206\u4eab\uff01",
                    "author_fullname": "t2_1whli87nwa",
                    "saved": false,
                    "mod_reason_title": null,
                    "gilded": 0,
                    "clicked": false,
                    "title": "\u521a\u5b66 Python\uff0c\u60f3\u77e5\u9053\u4f60\u4eec\u5f53\u521d\u662f\u600e\u4e48\u5165\u95e8\u7684\uff1f",
                    "link_flair_richtext": [
                        {
                            "e": "text",
                            "t": "News"
                        }
                    ],
                    "subreddit_name_prefixed": "r/Python",
                    "hidden": false,
                    "pwls": 6,
                    "link_flair_css_class": "news",
                    "downs": 0,
                    "thumbnail_height": null,
                    "top_awarded_type": null,
                    "hide_score": false,
                    "name": "t3_1n0sbdm",
                    "quarantine": false,
                    "link_flair_text_color": "light",
                    "upvote_ratio": 0.11,
                    "author_flair_background_color": null,
                    "subreddit_type": "public",
                    "ups": 0,
                    "total_awards_received": 0,
                    "media_embed": {},
                    "thumbnail_width": null,
                    "author_flair_template_id": null,
                    "is_original_content": false,
                    "user_reports": [],
                    "secure_media": null,
                    "is_reddit_media_domain": false,
                    "is_meta": false,
                    "category": null,
                    "secure_media_embed": {},
                    "link_flair_text": "News",
                    "can_mod_post": false,
                    "score": 0,
                    "approved_by": null,
                    "is_created_from_ads_ui": false,
                    "author_premium": false,
                    "thumbnail": "self",
                    "edited": false,
                    "author_flair_css_class": null,
                    "author_flair_richtext": [],
                    "gildings": {},
                    "content_categories": null,
                    "is_self": true,
                    "mod_note": null,
                    "created": 1756229619.0,
                    "link_flair_type": "richtext",
                    "wls": 6,
                    "removed_by_category": null,
                    "banned_by": null,
                    "author_flair_type": "text",
                    "domain": "self.Python",
                    "allow_live_comments": false,
                    "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;\u5927\u5bb6\u597d\uff0c\u6211\u521a\u5f00\u59cb\u5b66\u4e60 Python\uff0c\u76ee\u524d\u770b\u5b8c\u4e86 3\u20134 \u7ae0\u57fa\u7840\u8bed\u6cd5\uff0c\u4f1a\u5199\u7b80\u5355\u7684 if \u5224\u65ad\u3001for \u5faa\u73af\u548c\u51fd\u6570\u3002&lt;/p&gt;\n\n&lt;p&gt;\u6211\u7684\u76ee\u6807\u662f\u4ee5\u540e\u80fd\u7528 Python \u505a\u6570\u636e\u5206\u6790\uff0c\u6216\u8005\u5199\u4e00\u4e9b\u5c0f\u5de5\u5177\u3002&lt;/p&gt;\n\n&lt;p&gt;\u4f46\u73b0\u5728\u6709\u70b9\u56f0\u60d1\uff1a\u5e94\u8be5\u7ee7\u7eed\u6253\u7262\u8bed\u6cd5\u57fa\u7840\uff0c\u8fd8\u662f\u76f4\u63a5\u4e0a\u624b\u505a\u4e00\u4e9b\u5c0f\u9879\u76ee\uff1f&lt;/p&gt;\n\n&lt;p&gt;\u53e6\u5916\uff0c\u5927\u5bb6\u5728\u521a\u5165\u95e8\u7684\u65f6\u5019\uff0c\u6709\u54ea\u4e9b\u63a8\u8350\u7684\u4e66\u7c4d\u3001\u7f51\u7ad9\u6216\u8005\u7ec3\u624b\u9879\u76ee\uff1f&lt;/p&gt;\n\n&lt;p&gt;\u975e\u5e38\u611f\u8c22\u5927\u5bb6\u7684\u5206\u4eab\uff01&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
                    "likes": null,
                    "suggested_sort": null,
                    "banned_at_utc": null,
                    "view_count": null,
                    "archived": false,
                    "no_follow": true,
                    "is_crosspostable": true,
                    "pinned": false,
                    "over_18": false,
                    "all_awardings": [],
                    "awarders": [],
                    "media_only": false,
                    "link_flair_template_id": "0ad780a0-1c5e-11ea-978c-0ee7bacb2bff",
                    "can_gild": false,
                    "spoiler": false,
                    "locked": false,
                    "author_flair_text": null,
                    "treatment_tags": [],
                    "visited": false,
                    "removed_by": null,
                    "num_reports": null,
                    "distinguished": null,
                    "subreddit_id": "t5_2qh0y",
                    "author_is_blocked": false,
                    "mod_reason_by": null,
                    "removal_reason": null,
                    "link_flair_background_color": "#7193ff",
                    "id": "1n0sbdm",
                    "is_robot_indexable": true,
                    "report_reasons": null,
                    "author": "Substantial_Brick826",
                    "discussion_type": null,
                    "num_comments": 6,
                    "send_replies": true,
                    "contest_mode": false,
                    "mod_reports": [],
                    "author_patreon_flair": false,
                    "author_flair_text_color": null,
                    "permalink": "/r/Python/comments/1n0sbdm/\u521a\u5b66_python\u60f3\u77e5\u9053\u4f60\u4eec\u5f53\u521d\u662f\u600e\u4e48\u5165\u95e8\u7684/",
                    "stickied": false,
                    "url": "https://www.reddit.com/r/Python/comments/1n0sbdm/\u521a\u5b66_python\u60f3\u77e5\u9053\u4f60\u4eec\u5f53\u521d\u662f\u600e\u4e48\u5165\u95e8\u7684/",
                    "subreddit_subscribers": 1387545,
                    "created_utc": 1756229619.0,
                    "num_crossposts": 0,
                    "media": null,
                    "is_video": false
                }
            }
        ],
        "before": null
    }
}